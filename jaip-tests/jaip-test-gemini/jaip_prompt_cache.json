[
  {
    "uuid": "a633b080-474e-484b-a865-bf7e3b51ffdb",
    "instant": "2025-07-15T11:19:14.519627098Z",
    "key": "ZafPmhzwh5G6JrH9VFp+5w\u003d\u003d",
    "result": "if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    final int n \u003d array.length;\n    final int MIN_MERGE \u003d 32;\n\n    int minRun \u003d 0;\n    {\n        int r \u003d 0;\n        int nTemp \u003d n;\n        while (nTemp \u003e\u003d MIN_MERGE) {\n            r |\u003d (nTemp \u0026 1);\n            nTemp \u003e\u003e\u003d 1;\n        }\n        minRun \u003d nTemp + r;\n    }\n\n    final int MAX_RUN_STACK \u003d 40;\n    int[] runBase \u003d new int[MAX_RUN_STACK];\n    int[] runLen \u003d new int[MAX_RUN_STACK];\n    int stackSize \u003d 0;\n\n    int[] temp \u003d new int[n]; // Temporary array for merging\n\n    int cursor \u003d 0;\n    while (cursor \u003c n) {\n        int lo \u003d cursor;\n        int hi \u003d cursor + 1;\n        boolean isDescending \u003d false;\n        if (hi \u003c n) {\n            if (array[hi] \u003c array[lo]) {\n                isDescending \u003d true;\n                while (hi \u003c n \u0026\u0026 array[hi] \u003c array[hi - 1]) {\n                    hi++;\n                }\n            } else {\n                while (hi \u003c n \u0026\u0026 array[hi] \u003e\u003d array[hi - 1]) {\n                    hi++;\n                }\n            }\n        }\n        int runLenFound \u003d hi - lo;\n\n        if (isDescending) {\n            int i \u003d lo;\n            int j \u003d hi - 1;\n            while (i \u003c j) {\n                int t \u003d array[i];\n                array[i] \u003d array[j];\n                array[j] \u003d t;\n                i++;\n                j--;\n            }\n        }\n\n        if (runLenFound \u003c minRun) {\n            int end \u003d Math.min(lo + minRun, n);\n            for (int i \u003d lo + 1; i \u003c end; i++) {\n                int key \u003d array[i];\n                int hiBs \u003d i;\n                int loBs \u003d lo;\n                while (loBs \u003c hiBs) {\n                    int midBs \u003d (loBs + hiBs) \u003e\u003e\u003e 1;\n                    if (key \u003c array[midBs]) {\n                        hiBs \u003d midBs;\n                    } else {\n                        loBs \u003d midBs + 1;\n                    }\n                }\n                for (int kShift \u003d i; kShift \u003e loBs; kShift--) {\n                    array[kShift] \u003d array[kShift - 1];\n                }\n                array[loBs] \u003d key;\n            }\n            runLenFound \u003d end - lo;\n        }\n\n        runBase[stackSize] \u003d lo;\n        runLen[stackSize] \u003d runLenFound;\n        stackSize++;\n\n        while (stackSize \u003e\u003d 2) {\n            int x \u003d runLen[stackSize - 2];\n            int y \u003d runLen[stackSize - 1];\n            int z \u003d (stackSize \u003e\u003d 3) ? runLen[stackSize - 3] : Integer.MAX_VALUE;\n\n            if (z \u003c\u003d x + y) {\n                if (z \u003c y) {\n                    // Merge A and B (runBase[stackSize-3] and runBase[stackSize-2])\n                    int mBase1 \u003d runBase[stackSize - 3];\n                    int mLen1 \u003d runLen[stackSize - 3];\n                    int mBase2 \u003d runBase[stackSize - 2];\n                    int mLen2 \u003d runLen[stackSize - 2];\n\n                    boolean mCopyFirstRunToTemp \u003d (mLen1 \u003c\u003d mLen2);\n\n                    if (mCopyFirstRunToTemp) {\n                        System.arraycopy(array, mBase1, temp, 0, mLen1);\n                        int mK \u003d mBase1;\n                        int mI \u003d 0;\n                        int mJ \u003d mBase2;\n                        while (mI \u003c mLen1 \u0026\u0026 mJ \u003c mBase2 + mLen2) {\n                            if (temp[mI] \u003c\u003d array[mJ]) { array[mK++] \u003d temp[mI++]; } else { array[mK++] \u003d array[mJ++]; }\n                        }\n                        while (mI \u003c mLen1) { array[mK++] \u003d temp[mI++]; }\n                    } else {\n                        System.arraycopy(array, mBase2, temp, 0, mLen2);\n                        int mK \u003d mBase2 + mLen2 - 1;\n                        int mI \u003d mBase1 + mLen1 - 1;\n                        int mJ \u003d mLen2 - 1;\n                        while (mI \u003e\u003d mBase1 \u0026\u0026 mJ \u003e\u003d 0) {\n                            if (array[mI] \u003e\u003d temp[mJ]) { array[mK--] \u003d array[mI--]; } else { array[mK--] \u003d temp[mJ--]; }\n                        }\n                        while (mJ \u003e\u003d 0) { array[mK--] \u003d temp[mJ--]; }\n                    }\n\n                    runLen[stackSize - 3] \u003d mLen1 + mLen2;\n                    runBase[stackSize - 2] \u003d runBase[stackSize - 1];\n                    runLen[stackSize - 2] \u003d runLen[stackSize - 1];\n                    stackSize--;\n                    continue;\n                } else {\n                    // Merge B and C (runBase[stackSize-2] and runBase[stackSize-1])\n                    int mBase1 \u003d runBase[stackSize - 2];\n                    int mLen1 \u003d runLen[stackSize - 2];\n                    int mBase2 \u003d runBase[stackSize - 1];\n                    int mLen2 \u003d runLen[stackSize - 1];\n\n                    boolean mCopyFirstRunToTemp \u003d (mLen1 \u003c\u003d mLen2);\n\n                    if (mCopyFirstRunToTemp) {\n                        System.arraycopy(array, mBase1, temp, 0, mLen1);\n                        int mK \u003d mBase1;\n                        int mI \u003d 0;\n                        int mJ \u003d mBase2;\n                        while (mI \u003c mLen1 \u0026\u0026 mJ \u003c mBase2 + mLen2) {\n                            if (temp[mI] \u003c\u003d array[mJ]) { array[mK++] \u003d temp[mI++]; } else { array[mK++] \u003d array[mJ++]; }\n                        }\n                        while (mI \u003c mLen1) { array[mK++] \u003d temp[mI++]; }\n                    } else {\n                        System.arraycopy(array, mBase2, temp, 0, mLen2);\n                        int mK \u003d mBase2 + mLen2 - 1;\n                        int mI \u003d mBase1 + mLen1 - 1;\n                        int mJ \u003d mLen2 - 1;\n                        while (mI \u003e\u003d mBase1 \u0026\u0026 mJ \u003e\u003d 0) {\n                            if (array[mI] \u003e\u003d temp[mJ]) { array[mK--] \u003d array[mI--]; } else { array[mK--] \u003d temp[mJ--]; }\n                        }\n                        while (mJ \u003e\u003d 0) { array[mK--] \u003d temp[mJ--]; }\n                    }\n\n                    runLen[stackSize - 2] \u003d mLen1 + mLen2;\n                    stackSize--;\n                    continue;\n                }\n            } else if (y \u003c\u003d z) {\n                // Merge B and C (runBase[stackSize-2] and runBase[stackSize-1])\n                int mBase1 \u003d runBase[stackSize - 2];\n                int mLen1 \u003d runLen[stackSize - 2];\n                int mBase2 \u003d runBase[stackSize - 1];\n                int mLen2 \u003d runLen[stackSize - 1];\n\n                boolean mCopyFirstRunToTemp \u003d (mLen1 \u003c\u003d mLen2);\n\n                if (mCopyFirstRunToTemp) {\n                    System.arraycopy(array, mBase1, temp, 0, mLen1);\n                    int mK \u003d mBase1;\n                    int mI \u003d 0;\n                    int mJ \u003d mBase2;\n                    while (mI \u003c mLen1 \u0026\u0026 mJ \u003c mBase2 + mLen2) {\n                        if (temp[mI] \u003c\u003d array[mJ]) { array[mK++] \u003d temp[mI++]; } else { array[mK++] \u003d array[mJ++]; }\n                    }\n                    while (mI \u003c mLen1) { array[mK++] \u003d temp[mI++]; }\n                } else {\n                    System.arraycopy(array, mBase2, temp, 0, mLen2);\n                    int mK \u003d mBase2 + mLen2 - 1;\n                    int mI \u003d mBase1 + mLen1 - 1;\n                    int mJ \u003d mLen2 - 1;\n                    while (mI \u003e\u003d mBase1 \u0026\u0026 mJ \u003e\u003d 0) {\n                        if (array[mI] \u003e\u003d temp[mJ]) { array[mK--] \u003d array[mI--]; } else { array[mK--] \u003d temp[mJ--]; }\n                    }\n                    while (mJ \u003e\u003d 0) { array[mK--] \u003d temp[mJ--]; }\n                }\n\n                runLen[stackSize - 2] \u003d mLen1 + mLen2;\n                stackSize--;\n                continue;\n            }\n            break;\n        }\n        cursor +\u003d runLenFound;\n    }\n\n    while (stackSize \u003e 1) {\n        // Merge the last two runs (runBase[stackSize-2] and runBase[stackSize-1])\n        int mBase1 \u003d runBase[stackSize - 2];\n        int mLen1 \u003d runLen[stackSize - 2];\n        int mBase2 \u003d runBase[stackSize - 1];\n        int mLen2 \u003d runLen[stackSize - 1];\n\n        boolean mCopyFirstRunToTemp \u003d (mLen1 \u003c\u003d mLen2);\n\n        if (mCopyFirstRunToTemp) {\n            System.arraycopy(array, mBase1, temp, 0, mLen1);\n            int mK \u003d mBase1;\n            int mI \u003d 0;\n            int mJ \u003d mBase2;\n            while (mI \u003c mLen1 \u0026\u0026 mJ \u003c mBase2 + mLen2) {\n                if (temp[mI] \u003c\u003d array[mJ]) { array[mK++] \u003d temp[mI++]; } else { array[mK++] \u003d array[mJ++]; }\n            }\n            while (mI \u003c mLen1) { array[mK++] \u003d temp[mI++]; }\n        } else {\n            System.arraycopy(array, mBase2, temp, 0, mLen2);\n            int mK \u003d mBase2 + mLen2 - 1;\n            int mI \u003d mBase1 + mLen1 - 1;\n            int mJ \u003d mLen2 - 1;\n            while (mI \u003e\u003d mBase1 \u0026\u0026 mJ \u003e\u003d 0) {\n                if (array[mI] \u003e\u003d temp[mJ]) { array[mK--] \u003d array[mI--]; } else { array[mK--] \u003d temp[mJ--]; }\n            }\n            while (mJ \u003e\u003d 0) { array[mK--] \u003d temp[mJ--]; }\n        }\n\n        runLen[stackSize - 2] \u003d mLen1 + mLen2;\n        stackSize--;\n    }\n\n    if (!asc) {\n        int i \u003d 0;\n        int j \u003d n - 1;\n        while (i \u003c j) {\n            int t \u003d array[i];\n            array[i] \u003d array[j];\n            array[j] \u003d t;\n            i++;\n            j--;\n        }\n    }\n\n    return array;"
  }
]