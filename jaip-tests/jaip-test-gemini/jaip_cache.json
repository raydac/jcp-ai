[
  {
    "uuid": "bab6254f-6d62-4072-ad6e-82ca0aa1751e",
    "instant": "2025-07-16T22:33:08.745503283Z",
    "key": "ULW6+gT8gdk4dUlxR/Vhoj6NqCi5k60A8tuCHugfK5idNDEocav/IGDXfRG96oVLxKnfkYyhCWttwRN1xYlJ5/hhClPtmD3gZziGsG9iB1c\u003d",
    "result": "/**\n * Sorts an array of integers using the HeapSort algorithm, providing O(N log N) time complexity\n * and minimal auxiliary space (O(1) for the sort itself, plus O(N) for the required array copy).\n * This method prioritizes speed and adheres to strict constraints regarding external dependencies\n * and internal code structure.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return A new array containing the sorted values. If the input array is null, empty, or contains\n *         a single element, the original array reference is returned without modification.\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int n \u003d array.length;\n    int[] result \u003d new int[n];\n    for (int i \u003d 0; i \u003c n; i++) {\n        result[i] \u003d array[i];\n    }\n\n    for (int i \u003d n / 2 - 1; i \u003e\u003d 0; i--) {\n        int current \u003d i;\n        while (true) {\n            int leftChild \u003d 2 * current + 1;\n            int rightChild \u003d 2 * current + 2;\n            int targetIndex \u003d current;\n\n            if (leftChild \u003c n \u0026\u0026 (asc ? result[leftChild] \u003e result[targetIndex] : result[leftChild] \u003c result[targetIndex])) {\n                targetIndex \u003d leftChild;\n            }\n            if (rightChild \u003c n \u0026\u0026 (asc ? result[rightChild] \u003e result[targetIndex] : result[rightChild] \u003c result[targetIndex])) {\n                targetIndex \u003d rightChild;\n            }\n\n            if (targetIndex !\u003d current) {\n                int temp \u003d result[current];\n                result[current] \u003d result[targetIndex];\n                result[targetIndex] \u003d temp;\n                current \u003d targetIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    for (int i \u003d n - 1; i \u003e 0; i--) {\n        int temp \u003d result[0];\n        result[0] \u003d result[i];\n        result[i] \u003d temp;\n\n        int current \u003d 0;\n        int heapSize \u003d i;\n        while (true) {\n            int leftChild \u003d 2 * current + 1;\n            int rightChild \u003d 2 * current + 2;\n            int targetIndex \u003d current;\n\n            if (leftChild \u003c heapSize \u0026\u0026 (asc ? result[leftChild] \u003e result[targetIndex] : result[leftChild] \u003c result[targetIndex])) {\n                targetIndex \u003d leftChild;\n            }\n            if (rightChild \u003c heapSize \u0026\u0026 (asc ? result[rightChild] \u003e result[targetIndex] : result[rightChild] \u003c result[targetIndex])) {\n                targetIndex \u003d rightChild;\n            }\n\n            if (targetIndex !\u003d current) {\n                int temp2 \u003d result[current];\n                result[current] \u003d result[targetIndex];\n                result[targetIndex] \u003d temp2;\n                current \u003d targetIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return result;\n}",
    "fileName": "ArraySorter.java",
    "line": 5
  }
]