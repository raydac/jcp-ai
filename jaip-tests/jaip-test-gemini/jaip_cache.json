[{
  "uuid": "3517ed62-a55f-4d12-acf3-56a9d8efc2ba",
  "instant": "2025-07-20T07:29:42.563419865Z",
  "key": "xXSDlFqXa/SznNrHu8Id98R9+WfV04tMwVyp6YFTFn64/RyPwUN/kHNvocC/l/GWE4PniTp3tE/d8oUiA0vNO0qgn2hx4mpb7mKMTv1NS4Y=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an array of integers using an optimized iterative Quicksort algorithm.\n * This method prioritizes speed and uses minimal memory overhead for the sorting process itself,\n * but returns a new array instance if sorting is performed.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return The same incoming array if it is null, empty, or contains a single value.\n *         Otherwise, returns a new array containing the sorted values.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] result = new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n\n    final int INSERTION_SORT_THRESHOLD = 10;\n\n    int[] stack = new int[128];\n    int top = -1;\n\n    stack[++top] = 0;\n    stack[++top] = result.length - 1;\n\n    while (top >= 0) {\n        int high = stack[top--];\n        int low = stack[top--];\n\n        if (high - low + 1 <= INSERTION_SORT_THRESHOLD) {\n            for (int i = low + 1; i <= high; i++) {\n                int key = result[i];\n                int j = i - 1;\n                if (asc) {\n                    while (j >= low && result[j] > key) {\n                        result[j + 1] = result[j];\n                        j--;\n                    }\n                } else {\n                    while (j >= low && result[j] < key) {\n                        result[j + 1] = result[j];\n                        j--;\n                    }\n                }\n                result[j + 1] = key;\n            }\n            continue;\n        }\n\n        int pivotIndex = low + (high - low) / 2;\n        int pivotValue = result[pivotIndex];\n\n        int temp = result[pivotIndex];\n        result[pivotIndex] = result[high];\n        result[high] = temp;\n\n        int i = low;\n        int j = low;\n\n        if (asc) {\n            for (; j < high; j++) {\n                if (result[j] < pivotValue) {\n                    temp = result[i];\n                    result[i] = result[j];\n                    result[j] = temp;\n                    i++;\n                }\n            }\n        } else {\n            for (; j < high; j++) {\n                if (result[j] > pivotValue) {\n                    temp = result[i];\n                    result[i] = result[j];\n                    result[j] = temp;\n                    i++;\n                }\n            }\n        }\n\n        temp = result[i];\n        result[i] = result[high];\n        result[high] = temp;\n\n        if (i - low > high - i) {\n            if (low < i - 1) {\n                stack[++top] = low;\n                stack[++top] = i - 1;\n            }\n            if (i + 1 < high) {\n                stack[++top] = i + 1;\n                stack[++top] = high;\n            }\n        } else {\n            if (i + 1 < high) {\n                stack[++top] = i + 1;\n                stack[++top] = high;\n            }\n            if (low < i - 1) {\n                stack[++top] = low;\n                stack[++top] = i - 1;\n            }\n        }\n    }\n\n    return result;\n}"
}]