[
  {
    "uuid": "3e20bceb-ce9a-44a1-b99b-3c4873cac8c4",
    "instant": "2025-07-19T12:56:36.924256921Z",
    "key": "xXSDlFqXa/SznNrHu8Id98R9+WfV04tMwVyp6YFTFn64/RyPwUN/kHNvocC/l/GWE4PniTp3tE/d8oUiA0vNO0qgn2hx4mpb7mKMTv1NS4Y=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using the Heapsort algorithm, which provides O(N log N) time complexity\n * and O(1) auxiliary space (excluding the required new array copy).\n * This implementation prioritizes speed while maintaining minimal memory overhead.\n *\n * @param array The array to be sorted.\n * @param asc   If true, sorts in ascending order; otherwise, sorts in descending order.\n * @return The same incoming array if it is null, empty, or a single-value array.\n *         Otherwise, returns a new version of the array with sorted values.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] sortedArray = new int[array.length];\n    java.lang.System.arraycopy(array, 0, sortedArray, 0, array.length);\n\n    int n = sortedArray.length;\n\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int k = i;\n        int value = sortedArray[k];\n\n        while (k < n / 2) {\n            int child = 2 * k + 1;\n            if (child + 1 < n) {\n                if (asc) {\n                    if (sortedArray[child] < sortedArray[child + 1]) {\n                        child++;\n                    }\n                } else {\n                    if (sortedArray[child] > sortedArray[child + 1]) {\n                        child++;\n                    }\n                }\n            }\n\n            boolean shouldSwap;\n            if (asc) {\n                shouldSwap = (value < sortedArray[child]);\n            } else {\n                shouldSwap = (value > sortedArray[child]);\n            }\n\n            if (shouldSwap) {\n                sortedArray[k] = sortedArray[child];\n                k = child;\n            } else {\n                break;\n            }\n        }\n        sortedArray[k] = value;\n    }\n\n    for (int i = n - 1; i > 0; i--) {\n        int temp = sortedArray[0];\n        sortedArray[0] = sortedArray[i];\n        sortedArray[i] = temp;\n\n        int k = 0;\n        int value = sortedArray[k];\n        int heapSize = i;\n\n        while (k < heapSize / 2) {\n            int child = 2 * k + 1;\n            if (child + 1 < heapSize) {\n                if (asc) {\n                    if (sortedArray[child] < sortedArray[child + 1]) {\n                        child++;\n                    }\n                } else {\n                    if (sortedArray[child] > sortedArray[child + 1]) {\n                        child++;\n                    }\n                }\n            }\n\n            boolean shouldSwap;\n            if (asc) {\n                shouldSwap = (value < sortedArray[child]);\n            } else {\n                shouldSwap = (value > sortedArray[child]);\n            }\n\n            if (shouldSwap) {\n                sortedArray[k] = sortedArray[child];\n                k = child;\n            } else {\n                break;\n            }\n        }\n        sortedArray[k] = value;\n    }\n\n    return sortedArray;\n}"
  }
]