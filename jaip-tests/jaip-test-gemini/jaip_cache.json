[
  {
    "uuid": "ff63beea-6ce8-42fc-913a-2e4eb6722cc5",
    "instant": "2025-07-18T10:25:42.639424923Z",
    "key": "ULW6+gT8gdk4dUlxR/Vhoj6NqCi5k60A8tuCHugfK5idNDEocav/IGDXfRG96oVLxKnfkYyhCWttwRN1xYlJ5/hhClPtmD3gZziGsG9iB1c=",
    "fileName": "ArraySorter.java",
    "line": 5,
    "result": "/**\n * Sorts an array of integers using the HeapSort algorithm, providing O(N log N) time complexity\n * and minimal auxiliary space (O(1) for the sort itself, plus O(N) for the required array copy).\n * This method prioritizes speed and adheres to strict constraints regarding external dependencies\n * and internal code structure.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return A new array containing the sorted values. If the input array is null, empty, or contains\n *         a single element, the original array reference is returned without modification.\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int n = array.length;\n    int[] result = new int[n];\n    for (int i = 0; i < n; i++) {\n        result[i] = array[i];\n    }\n\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int current = i;\n        while (true) {\n            int leftChild = 2 * current + 1;\n            int rightChild = 2 * current + 2;\n            int targetIndex = current;\n\n            if (leftChild < n && (asc ? result[leftChild] > result[targetIndex] : result[leftChild] < result[targetIndex])) {\n                targetIndex = leftChild;\n            }\n            if (rightChild < n && (asc ? result[rightChild] > result[targetIndex] : result[rightChild] < result[targetIndex])) {\n                targetIndex = rightChild;\n            }\n\n            if (targetIndex != current) {\n                int temp = result[current];\n                result[current] = result[targetIndex];\n                result[targetIndex] = temp;\n                current = targetIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    for (int i = n - 1; i > 0; i--) {\n        int temp = result[0];\n        result[0] = result[i];\n        result[i] = temp;\n\n        int current = 0;\n        int heapSize = i;\n        while (true) {\n            int leftChild = 2 * current + 1;\n            int rightChild = 2 * current + 2;\n            int targetIndex = current;\n\n            if (leftChild < heapSize && (asc ? result[leftChild] > result[targetIndex] : result[leftChild] < result[targetIndex])) {\n                targetIndex = leftChild;\n            }\n            if (rightChild < heapSize && (asc ? result[rightChild] > result[targetIndex] : result[rightChild] < result[targetIndex])) {\n                targetIndex = rightChild;\n            }\n\n            if (targetIndex != current) {\n                int temp2 = result[current];\n                result[current] = result[targetIndex];\n                result[targetIndex] = temp2;\n                current = targetIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return result;\n}"
  }
]temp2 \u003d result[current];\n                result[current] \u003d result[targetIndex];\n                result[targetIndex] \u003d temp2;\n                current \u003d targetIndex;\n} else {\n                break;\n}\n}\n}\n\n    return result;\n}",
    "fileName": "ArraySorter.java",
    "line": 5
  }
]