[
  {
    "uuid": "d9110e43-f640-4a8f-8509-c0faea03bed0",
    "instant": "2025-07-18T08:35:12.709215081Z",
    "key": "ULW6+gT8gdk4dUlxR/Vhoj6NqCi5k60A8tuCHugfK5idNDEocav/IGDXfRG96oVLxKnfkYyhCWttwRN1xYlJ5/hhClPtmD3gZziGsG9iB1c\u003d",
    "result": "/**\n * Performs fast sorting of an integer array using dual-pivot quicksort algorithm.\n * Returns the original array if null, empty, or contains single element.\n * Otherwise returns a new sorted array with minimal memory overhead.\n *\n * @param array the integer array to be sorted\n * @param asc true for ascending order, false for descending order\n * @return the original array if null/empty/single element, otherwise new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n    \n    int[] result \u003d array.clone();\n    int[] stack \u003d new int[64];\n    int stackTop \u003d 0;\n    \n    stack[stackTop++] \u003d 0;\n    stack[stackTop++] \u003d result.length - 1;\n    \n    while (stackTop \u003e 0) {\n        int right \u003d stack[--stackTop];\n        int left \u003d stack[--stackTop];\n        \n        if (left \u003e\u003d right) continue;\n        \n        if (right - left \u003c 47) {\n            for (int i \u003d left + 1; i \u003c\u003d right; i++) {\n                int key \u003d result[i];\n                int j \u003d i - 1;\n                while (j \u003e\u003d left \u0026\u0026 ((asc \u0026\u0026 result[j] \u003e key) || (!asc \u0026\u0026 result[j] \u003c key))) {\n                    result[j + 1] \u003d result[j];\n                    j--;\n                }\n                result[j + 1] \u003d key;\n            }\n            continue;\n        }\n        \n        int third \u003d (right - left) / 3;\n        int m1 \u003d left + third;\n        int m2 \u003d right - third;\n        \n        if (result[m1] \u003c result[m2]) {\n            int temp \u003d result[m1]; result[m1] \u003d result[left]; result[left] \u003d temp;\n            temp \u003d result[m2]; result[m2] \u003d result[right]; result[right] \u003d temp;\n        } else {\n            int temp \u003d result[m1]; result[m1] \u003d result[right]; result[right] \u003d temp;\n            temp \u003d result[m2]; result[m2] \u003d result[left]; result[left] \u003d temp;\n        }\n        \n        int pivot1 \u003d result[left];\n        int pivot2 \u003d result[right];\n        \n        if (pivot1 \u003d\u003d pivot2) {\n            int k \u003d left;\n            for (int i \u003d left + 1; i \u003c\u003d right; i++) {\n                if (result[i] \u003d\u003d pivot1) {\n                    k++;\n                    if (k !\u003d i) {\n                        int temp \u003d result[k];\n                        result[k] \u003d result[i];\n                        result[i] \u003d temp;\n                    }\n                }\n            }\n            if (k \u003c right) {\n                stack[stackTop++] \u003d k + 1;\n                stack[stackTop++] \u003d right;\n            }\n            continue;\n        }\n        \n        if (asc \u0026\u0026 pivot1 \u003e pivot2) {\n            int temp \u003d result[left]; result[left] \u003d result[right]; result[right] \u003d temp;\n            pivot1 \u003d result[left];\n            pivot2 \u003d result[right];\n        } else if (!asc \u0026\u0026 pivot1 \u003c pivot2) {\n            int temp \u003d result[left]; result[left] \u003d result[right]; result[right] \u003d temp;\n            pivot1 \u003d result[left];\n            pivot2 \u003d result[right];\n        }\n        \n        int less \u003d left + 1;\n        int great \u003d right - 1;\n        \n        for (int k \u003d less; k \u003c\u003d great; k++) {\n            if ((asc \u0026\u0026 result[k] \u003c pivot1) || (!asc \u0026\u0026 result[k] \u003e pivot1)) {\n                int temp \u003d result[k];\n                result[k] \u003d result[less];\n                result[less] \u003d temp;\n                less++;\n            } else if ((asc \u0026\u0026 result[k] \u003e pivot2) || (!asc \u0026\u0026 result[k] \u003c pivot2)) {\n                while (k \u003c great \u0026\u0026 ((asc \u0026\u0026 result[great] \u003e pivot2) || (!asc \u0026\u0026 result[great] \u003c pivot2))) {\n                    great--;\n                }\n                int temp \u003d result[k];\n                result[k] \u003d result[great];\n                result[great] \u003d temp;\n                great--;\n                if ((asc \u0026\u0026 result[k] \u003c pivot1) || (!asc \u0026\u0026 result[k] \u003e pivot1)) {\n                    temp \u003d result[k];\n                    result[k] \u003d result[less];\n                    result[less] \u003d temp;\n                    less++;\n                }\n            }\n        }\n        \n        int temp \u003d result[left];\n        result[left] \u003d result[less - 1];\n        result[less - 1] \u003d temp;\n        temp \u003d result[right];\n        result[right] \u003d result[great + 1];\n        result[great + 1] \u003d temp;\n        \n        if (left \u003c less - 2) {\n            stack[stackTop++] \u003d left;\n            stack[stackTop++] \u003d less - 2;\n        }\n        if (less \u003c great) {\n            stack[stackTop++] \u003d less;\n            stack[stackTop++] \u003d great;\n        }\n        if (great + 2 \u003c right) {\n            stack[stackTop++] \u003d great + 2;\n            stack[stackTop++] \u003d right;\n        }\n    }\n    \n    return result;\n}",
    "fileName": "ArraySorter.java",
    "line": 5
  }
]