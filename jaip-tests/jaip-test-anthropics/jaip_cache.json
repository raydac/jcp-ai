[{
  "uuid": "c9d89cee-08d8-4a7a-b073-443e0f1de63e",
  "instant": "2025-07-20T12:03:00.907736377Z",
  "key": "xXSDlFqXa/SznNrHu8Id98R9+WfV04tMwVyp6YFTFn64/RyPwUN/kHNvocC/l/GWE4PniTp3tE/d8oUiA0vNO0qgn2hx4mpb7mKMTv1NS4Y=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Performs fast sorting of integer array using dual-pivot quicksort algorithm.\n * Returns null/empty/single-element arrays unchanged, otherwise creates new sorted array.\n * Prioritizes speed over memory usage with in-place partitioning and optimized pivot selection.\n *\n * @param array the integer array to sort, may be null\n * @param asc true for ascending order, false for descending order\n * @return same array if null/empty/single element, otherwise new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) return array;\n    \n    int[] result = new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n    \n    int[] stack = new int[64];\n    int top = 0;\n    stack[top++] = 0;\n    stack[top++] = result.length - 1;\n    \n    while (top > 0) {\n        int high = stack[--top];\n        int low = stack[--top];\n        \n        if (low < high) {\n            if (high - low < 47) {\n                for (int i = low + 1; i <= high; i++) {\n                    int key = result[i];\n                    int j = i - 1;\n                    while (j >= low && ((asc && result[j] > key) || (!asc && result[j] < key))) {\n                        result[j + 1] = result[j];\n                        j--;\n                    }\n                    result[j + 1] = key;\n                }\n            } else {\n                int third = (high - low) / 3;\n                int m1 = low + third;\n                int m2 = high - third;\n                \n                if (result[m1] < result[m2]) {\n                    int temp = result[m1]; result[m1] = result[low]; result[low] = temp;\n                    temp = result[m2]; result[m2] = result[high]; result[high] = temp;\n                } else {\n                    int temp = result[m1]; result[m1] = result[high]; result[high] = temp;\n                    temp = result[m2]; result[m2] = result[low]; result[low] = temp;\n                }\n                \n                int pivot1 = result[low];\n                int pivot2 = result[high];\n                \n                if (pivot1 == pivot2) {\n                    int k = low;\n                    for (int i = low + 1; i <= high; i++) {\n                        if (result[i] == pivot1) {\n                            k++;\n                            int temp = result[k]; result[k] = result[i]; result[i] = temp;\n                        }\n                    }\n                    continue;\n                }\n                \n                if (pivot1 > pivot2) {\n                    int temp = pivot1; pivot1 = pivot2; pivot2 = temp;\n                    temp = result[low]; result[low] = result[high]; result[high] = temp;\n                }\n                \n                int less = low + 1;\n                int great = high - 1;\n                \n                for (int k = less; k <= great; k++) {\n                    if ((asc && result[k] < pivot1) || (!asc && result[k] > pivot1)) {\n                        int temp = result[k]; result[k] = result[less]; result[less] = temp;\n                        less++;\n                    } else if ((asc && result[k] > pivot2) || (!asc && result[k] < pivot2)) {\n                        while (k < great && ((asc && result[great] > pivot2) || (!asc && result[great] < pivot2))) {\n                            great--;\n                        }\n                        int temp = result[k]; result[k] = result[great]; result[great] = temp;\n                        great--;\n                        if ((asc && result[k] < pivot1) || (!asc && result[k] > pivot1)) {\n                            temp = result[k]; result[k] = result[less]; result[less] = temp;\n                            less++;\n                        }\n                    }\n                }\n                \n                int temp = result[low]; result[low] = result[less - 1]; result[less - 1] = temp;\n                temp = result[high]; result[high] = result[great + 1]; result[great + 1] = temp;\n                \n                stack[top++] = low;\n                stack[top++] = less - 2;\n                stack[top++] = great + 2;\n                stack[top++] = high;\n                \n                if (less < great) {\n                    stack[top++] = less;\n                    stack[top++] = great;\n                }\n            }\n        }\n    }\n    \n    return result;\n}"
}]