[
  {
    "uuid": "e981ea3d-9f1e-482d-a8df-094c449a44d7",
    "instant": "2025-07-19T07:32:58.076162837Z",
    "key": "ULW6+gT8gdk4dUlxR/Vhoj6NqCi5k60A8tuCHugfK5idNDEocav/IGDXfRG96oVLxKnfkYyhCWttwRN1xYlJ5/hhClPtmD3gZziGsG9iB1c=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given int array using an in-place dual-pivot quicksort algorithm for fastest performance with minimal memory overhead.\n * Returns the same array if it is null, empty, or contains a single element; otherwise, returns a new sorted array in ascending or descending order.\n * The original array is not modified unless it is returned as-is.\n *\n * @param array the int array to sort\n * @param asc true for ascending order, false for descending order\n * @return a new sorted array, or the original if null, empty, or single element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    int[] a = new int[array.length];\n    System.arraycopy(array, 0, a, 0, array.length);\n    int left = 0, right = a.length - 1;\n    java.util.ArrayDeque<int[]> stack = new java.util.ArrayDeque<>();\n    stack.push(new int[]{left, right});\n    while (!stack.isEmpty()) {\n        int[] bounds = stack.pop();\n        int l = bounds[0], r = bounds[1];\n        if (r - l < 27) {\n            for (int i = l + 1; i <= r; i++) {\n                int v = a[i], j = i - 1;\n                while (j >= l && (asc ? a[j] > v : a[j] < v)) {\n                    a[j + 1] = a[j];\n                    j--;\n                }\n                a[j + 1] = v;\n            }\n            continue;\n        }\n        int p1 = a[l], p2 = a[r];\n        if ((asc ? p1 > p2 : p1 < p2)) {\n            int t = a[l]; a[l] = a[r]; a[r] = t;\n            p1 = a[l]; p2 = a[r];\n        }\n        int k = l + 1, g = r - 1, i = k;\n        while (i <= g) {\n            if (asc ? a[i] < p1 : a[i] > p1) {\n                int t = a[i]; a[i] = a[k]; a[k] = t;\n                k++;\n            } else if (asc ? a[i] > p2 : a[i] < p2) {\n                while ((asc ? a[g] > p2 : a[g] < p2) && i < g) g--;\n                int t = a[i]; a[i] = a[g]; a[g] = t;\n                g--;\n                if (asc ? a[i] < p1 : a[i] > p1) {\n                    t = a[i]; a[i] = a[k]; a[k] = t;\n                    k++;\n                }\n            }\n            i++;\n        }\n        k--; g++;\n        int t = a[l]; a[l] = a[k]; a[k] = t;\n        t = a[r]; a[r] = a[g]; a[g] = t;\n        stack.push(new int[]{l, k - 1});\n        stack.push(new int[]{k + 1, g - 1});\n        stack.push(new int[]{g + 1, r});\n    }\n    return a;\n}"
  }
]        }\n            i++;\n}\n        k--; g++;\n        int t \u003d a[l]; a[l] \u003d a[k]; a[k] \u003d t;\n        t \u003d a[r]; a[r] \u003d a[g]; a[g] \u003d t;\n        stack.push(new int[]{l, k - 1});\n        stack.push(new int[]{k + 1, g - 1});\n        stack.push(new int[]{g + 1, r});\n}\n    return a;\n}",
    "fileName": "ArraySorter.java",
    "line": 6
  }
]