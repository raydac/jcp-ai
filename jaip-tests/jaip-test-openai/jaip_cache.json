[{
  "uuid": "4e2f4bc7-cdaf-4d42-a5e3-05bbee1e2303",
  "instant": "2025-07-21T08:44:25.707545900Z",
  "key": "xXSDlFqXa/SznNrHu8Id98R9+WfV04tMwVyp6YFTFn64/RyPwUN/kHNvocC/l/GWE4PniTp3tE/d8oUiA0vNO0qgn2hx4mpb7mKMTv1NS4Y=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the given integer array using an in-place optimized QuickSort algorithm with minimal memory overhead.\n * Sorting is done in ascending order if asc is true, otherwise in descending order.\n * Returns the same incoming array if it is null, empty, or has a single value, else returns a new sorted array.\n * No third-party libraries or helper functions/classes are used.\n *\n * @param array the integer array to be sorted\n * @param asc true for ascending order, false for descending\n * @return a sorted array in specified order (same reference if trivial case, else sorted copy)\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    final int[] a = new int[array.length];\n    for (int i = 0; i < array.length; ++i) a[i] = array[i];\n    final java.util.Deque<int[]> stack = new java.util.ArrayDeque<>();\n    stack.push(new int[]{0, a.length - 1});\n    while (!stack.isEmpty()) {\n        int[] bounds = stack.pop();\n        int left = bounds[0], right = bounds[1];\n        while (left < right) {\n            int i = left, j = right;\n            int pivot = a[left + ((right - left) >>> 1)];\n            while (i <= j) {\n                if (asc) {\n                    while (a[i] < pivot) ++i;\n                    while (a[j] > pivot) --j;\n                } else {\n                    while (a[i] > pivot) ++i;\n                    while (a[j] < pivot) --j;\n                }\n                if (i <= j) {\n                    int tmp = a[i];\n                    a[i] = a[j];\n                    a[j] = tmp;\n                    ++i;\n                    --j;\n                }\n            }\n            if (j - left < right - i) {\n                if (left < j) stack.push(new int[]{left, j});\n                left = i;\n            } else {\n                if (i < right) stack.push(new int[]{i, right});\n                right = j;\n            }\n        }\n    }\n    return a;\n}"
}]