[
  {
    "uuid": "f311b8cb-0985-4e83-af01-af7f82fc5a52",
    "instant": "2025-07-19T12:57:03.127047392Z",
    "key": "xXSDlFqXa/SznNrHu8Id98R9+WfV04tMwVyp6YFTFn64/RyPwUN/kHNvocC/l/GWE4PniTp3tE/d8oUiA0vNO0qgn2hx4mpb7mKMTv1NS4Y=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given int array in ascending or descending order using an in-place iterative quicksort algorithm for optimal speed and minimal extra memory.\n * Returns the same array instance if it is null, empty, or has only one element, otherwise returns a new sorted array.\n * Sorting uses a non-recursive partitioning for O(log n) stack space and modifies the input array directly.\n * The 'asc' parameter specifies ascending (true) or descending (false) order.\n *\n * @param array the int array to be sorted\n * @param asc true for ascending order, false for descending order\n * @return sorted array (modifies and returns the incoming array unless it's size <= 1)\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    int[] a = array;\n    int[] stack = new int[64];\n    int top = -1;\n    stack[++top] = 0;\n    stack[++top] = a.length - 1;\n    while (top >= 0) {\n        int high = stack[top--];\n        int low = stack[top--];\n        while (low < high) {\n            int mid = low + ((high - low) >>> 1);\n            int pivot = a[mid];\n            int i = low, j = high;\n            while (i <= j) {\n                if (asc) {\n                    while (a[i] < pivot) i++;\n                    while (a[j] > pivot) j--;\n                } else {\n                    while (a[i] > pivot) i++;\n                    while (a[j] < pivot) j--;\n                }\n                if (i <= j) {\n                    int t = a[i]; a[i] = a[j]; a[j] = t;\n                    i++; j--;\n                }\n            }\n            if (j - low < high - i) {\n                if (low < j) { stack[++top] = low; stack[++top] = j; }\n                low = i;\n            } else {\n                if (i < high) { stack[++top] = i; stack[++top] = high; }\n                high = j;\n            }\n        }\n    }\n    return a;\n}"
  }
]