[
  {
    "uuid": "b6a00206-f43a-4dcb-8539-46b62b8bd15d",
    "instant": "2025-08-02T07:58:04.994558852Z",
    "key": "RaJTjMQoCiZxhR5E7DWiElALu4yQ23ofCxqmEEmDSH/lK2RRhsVJAxENEt/v5oV0Q1Qfbex9USkaKe8DzQfE4O1zAY7tyY/FmIqOQ77rDAI=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using the HeapSort algorithm.\n * This method prioritizes speed and has minimal memory overhead.\n * It does not use any third-party libraries, helpers, or utility classes\n * beyond standard Java platform classes. All sorting logic is contained\n * within this single method.\n *\n * @param array The array to be sorted. If null, empty, or a single-value array,\n *              the original array is returned.\n * @param asc   If true, the array is sorted in ascending order; otherwise, in descending order.\n * @return A new array with sorted values, or the original array if it was null, empty, or single-valued.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int n = array.length;\n    int[] result = java.util.Arrays.copyOf(array, n);\n\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int rootIndex = i;\n        int heapSize = n;\n        while (true) {\n            int leftChildIndex = 2 * rootIndex + 1;\n            int rightChildIndex = 2 * rootIndex + 2;\n            int largestIndex = rootIndex;\n\n            if (leftChildIndex < heapSize && result[leftChildIndex] > result[largestIndex]) {\n                largestIndex = leftChildIndex;\n            }\n\n            if (rightChildIndex < heapSize && result[rightChildIndex] > result[largestIndex]) {\n                largestIndex = rightChildIndex;\n            }\n\n            if (largestIndex != rootIndex) {\n                int swap = result[rootIndex];\n                result[rootIndex] = result[largestIndex];\n                result[largestIndex] = swap;\n\n                rootIndex = largestIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    for (int i = n - 1; i > 0; i--) {\n        int temp = result[0];\n        result[0] = result[i];\n        result[i] = temp;\n\n        int rootIndex = 0;\n        int heapSize = i;\n        while (true) {\n            int leftChildIndex = 2 * rootIndex + 1;\n            int rightChildIndex = 2 * rootIndex + 2;\n            int largestIndex = rootIndex;\n\n            if (leftChildIndex < heapSize && result[leftChildIndex] > result[largestIndex]) {\n                largestIndex = leftChildIndex;\n            }\n\n            if (rightChildIndex < heapSize && result[rightChildIndex] > result[largestIndex]) {\n                largestIndex = rightChildIndex;\n            }\n\n            if (largestIndex != rootIndex) {\n                int swap = result[rootIndex];\n                result[rootIndex] = result[largestIndex];\n                result[largestIndex] = swap;\n\n                rootIndex = largestIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    if (!asc) {\n        for (int i = 0; i < n / 2; i++) {\n            int temp = result[i];\n            result[i] = result[n - 1 - i];\n            result[n - 1 - i] = temp;\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]