[
  {
    "instant": "2025-08-09T17:23:51.840461322Z",
    "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using an iterative QuickSort algorithm.\n * This method prioritizes speed and has minimal memory overhead beyond the initial array copy.\n * It does not use any external libraries, helper methods, or utility classes.\n *\n * @param array The array to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return The sorted array. Returns the original array if it is null, empty, or contains a single element.\n *         Otherwise, returns a new array with sorted values.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] copy = new int[array.length];\n    for (int k = 0; k < array.length; k++) {\n        copy[k] = array[k];\n    }\n\n    int[] stack = new int[array.length + 2];\n    int top = -1;\n\n    stack[++top] = 0;\n    stack[++top] = array.length - 1;\n\n    while (top >= 0) {\n        int high = stack[top--];\n        int low = stack[top--];\n\n        if (low < high) {\n            int pivotValue = copy[low + (high - low) / 2];\n            int i = low - 1;\n            int j = high + 1;\n\n            while (true) {\n                if (asc) {\n                    do {\n                        i++;\n                    } while (copy[i] < pivotValue);\n\n                    do {\n                        j--;\n                    } while (copy[j] > pivotValue);\n                } else {\n                    do {\n                        i++;\n                    } while (copy[i] > pivotValue);\n\n                    do {\n                        j--;\n                    } while (copy[j] < pivotValue);\n                }\n\n                if (i >= j) {\n                    break;\n                }\n\n                int temp = copy[i];\n                copy[i] = copy[j];\n                copy[j] = temp;\n            }\n\n            if (low < j) {\n                stack[++top] = low;\n                stack[++top] = j;\n            }\n            if (i < high) {\n                stack[++top] = i;\n                stack[++top] = high;\n            }\n        }\n    }\n\n    return copy;\n}",
    "sinceUse": 0
  }
]