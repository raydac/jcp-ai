[
  {
    "uuid": "92a20253-1e1d-45cb-8a0a-8bf33fcf83cc",
    "instant": "2025-07-27T21:57:38.292935724Z",
    "key": "m/1k5KeMYeqdfmd0niPNDwjYAzJZHPoGwqLd7RaRzqzUr2MygljHJpOdgGJ9rlTiIUNWqy3tN+OAyQWvDC1rycRmqtGN8HL1IkzsuTQZhpE=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using an iterative Quicksort algorithm.\n * This method prioritizes speed and minimal memory overhead.\n * It handles null, empty, or single-value arrays by returning them directly.\n * For arrays with multiple values, it returns a new array containing the sorted values.\n * The sorting is done in-place on the new array copy.\n *\n * @param array The array to be sorted.\n * @param asc   If true, sorts in ascending order; otherwise, sorts in descending order.\n * @return The original array if it's null, empty, or contains a single element;\n *         otherwise, a new array with the sorted elements.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] result = new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n\n    int[] stack = new int[result.length * 2];\n    int top = -1;\n\n    stack[++top] = 0;\n    stack[++top] = result.length - 1;\n\n    while (top >= 0) {\n        int high = stack[top--];\n        int low = stack[top--];\n\n        if (low < high) {\n            int pivot = result[low + (high - low) / 2];\n            int i = low;\n            int j = high;\n\n            while (i <= j) {\n                while (result[i] < pivot) {\n                    i++;\n                }\n                while (result[j] > pivot) {\n                    j--;\n                }\n\n                if (i <= j) {\n                    int temp = result[i];\n                    result[i] = result[j];\n                    result[j] = temp;\n                    i++;\n                    j--;\n                }\n            }\n\n            if (low < j) {\n                stack[++top] = low;\n                stack[++top] = j;\n            }\n            if (i < high) {\n                stack[++top] = i;\n                stack[++top] = high;\n            }\n        }\n    }\n\n    if (!asc) {\n        int left = 0;\n        int right = result.length - 1;\n        while (left < right) {\n            int temp = result[left];\n            result[left] = result[right];\n            result[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]