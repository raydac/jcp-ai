[
  {
    "instant": "2025-08-10T07:26:44.218120023Z",
    "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using the Heapsort algorithm.\n * This method prioritizes speed and uses minimal memory overhead.\n * It does not use any external libraries or helper methods.\n *\n * @param array The array to be sorted.\n * @param asc   If true, sorts in ascending order; otherwise, sorts in descending order.\n * @return The same incoming array if it is null, empty, or a single-value array.\n *         Otherwise, returns a new array with the sorted values.\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int[] result \u003d new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n\n    int n \u003d result.length;\n\n    for (int i \u003d n / 2 - 1; i \u003e\u003d 0; i--) {\n        int k \u003d i;\n        int value \u003d result[k];\n        while (k * 2 + 1 \u003c n) {\n            int child \u003d k * 2 + 1;\n            if (asc) {\n                if (child + 1 \u003c n \u0026\u0026 result[child] \u003c result[child + 1]) {\n                    child++;\n                }\n                if (value \u003e\u003d result[child]) {\n                    break;\n                }\n            } else {\n                if (child + 1 \u003c n \u0026\u0026 result[child] \u003e result[child + 1]) {\n                    child++;\n                }\n                if (value \u003c\u003d result[child]) {\n                    break;\n                }\n            }\n            result[k] \u003d result[child];\n            k \u003d child;\n        }\n        result[k] \u003d value;\n    }\n\n    for (int i \u003d n - 1; i \u003e 0; i--) {\n        int temp \u003d result[0];\n        result[0] \u003d result[i];\n        result[i] \u003d temp;\n\n        int k \u003d 0;\n        int value \u003d result[k];\n        int currentHeapSize \u003d i;\n\n        while (k * 2 + 1 \u003c currentHeapSize) {\n            int child \u003d k * 2 + 1;\n            if (asc) {\n                if (child + 1 \u003c currentHeapSize \u0026\u0026 result[child] \u003c result[child + 1]) {\n                    child++;\n                }\n                if (value \u003e\u003d result[child]) {\n                    break;\n                }\n            } else {\n                if (child + 1 \u003c currentHeapSize \u0026\u0026 result[child] \u003e result[child + 1]) {\n                    child++;\n                }\n                if (value \u003c\u003d result[child]) {\n                    break;\n                }\n            }\n            result[k] \u003d result[child];\n            k \u003d child;\n        }\n        result[k] \u003d value;\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]