[
  {
    "instant": "2025-08-13T10:43:56.973415029Z",
    "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using the Heapsort algorithm.\n * This method prioritizes speed and minimal memory overhead,\n * implementing the entire sorting logic within a single method\n * without relying on external libraries or helper functions.\n *\n * @param array The array to be sorted.\n * @param asc   If true, sorts in ascending order; otherwise, sorts in descending order.\n * @return A new array with sorted values, or the original array if it\u0027s null, empty, or contains a single value.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int n \u003d array.length;\n    int[] result \u003d new int[n];\n    java.lang.System.arraycopy(array, 0, result, 0, n);\n\n    for (int i \u003d n / 2 - 1; i \u003e\u003d 0; i--) {\n        int k \u003d i;\n        int val \u003d result[k];\n        int currentHeapSize \u003d n;\n\n        while (k * 2 + 1 \u003c currentHeapSize) {\n            int child \u003d k * 2 + 1;\n\n            if (child + 1 \u003c currentHeapSize) {\n                if (asc) {\n                    if (result[child] \u003c result[child + 1]) {\n                        child++;\n                    }\n                } else {\n                    if (result[child] \u003e result[child + 1]) {\n                        child++;\n                    }\n                }\n            }\n\n            if (asc) {\n                if (val \u003e\u003d result[child]) {\n                    break;\n                }\n            } else {\n                if (val \u003c\u003d result[child]) {\n                    break;\n                }\n            }\n\n            result[k] \u003d result[child];\n            k \u003d child;\n        }\n        result[k] \u003d val;\n    }\n\n    for (int i \u003d n - 1; i \u003e 0; i--) {\n        int temp \u003d result[0];\n        result[0] \u003d result[i];\n        result[i] \u003d temp;\n\n        int k \u003d 0;\n        int val \u003d result[k];\n        int currentHeapSize \u003d i;\n\n        while (k * 2 + 1 \u003c currentHeapSize) {\n            int child \u003d k * 2 + 1;\n\n            if (child + 1 \u003c currentHeapSize) {\n                if (asc) {\n                    if (result[child] \u003c result[child + 1]) {\n                        child++;\n                    }\n                } else {\n                    if (result[child] \u003e result[child + 1]) {\n                        child++;\n                    }\n                }\n            }\n\n            if (asc) {\n                if (val \u003e\u003d result[child]) {\n                    break;\n                }\n            } else {\n                if (val \u003c\u003d result[child]) {\n                    break;\n                }\n            }\n\n            result[k] \u003d result[child];\n            k \u003d child;\n        }\n        result[k] \u003d val;\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]