[
  {
    "instant": "2025-10-04T11:53:21.545976811Z",
    "key": "9tFpP1MzgtrkHB0A0NJq/jWomMpFP/6f8/srigzUtKzqpieYpRrx2vnsRQhjYADFAd4RcvNUdRRYY1QvIgb8ndTWC6Z6dB/WyAw2EaR81RE\u003d",
    "fileName": "ArraySorter.java",
    "line": 29,
    "result": "public static void helloWorld() {\n    System.out.println(\"Hello, World!\");\n}",
    "sinceUse": 0
  },
  {
    "instant": "2025-09-30T22:14:49.974476149Z",
    "key": "C/ECzN9DszGisj8us/MFtbkjMiTBWb0fLar68/CnNcZ+UCU0F3IxwFuvX26Ch5jPG+OuFlvqbNVpQeNl18ZAuRwCY4nOIGma5g+dT4bgtTM\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using a fast sorting algorithm with minimal memory overhead.\n * The speed of sorting is prioritized.\n *\n * @param array The array to be sorted. If null, empty, or a single-element array, it is returned as is.\n * @param asc   If true, the array is sorted in ascending order; otherwise, in descending order.\n * @return A new array with sorted values, or the original array if it was null, empty, or single-valued.\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int[] result \u003d java.util.Arrays.copyOf(array, array.length);\n\n    int n \u003d result.length;\n    for (int i \u003d n / 2 - 1; i \u003e\u003d 0; i--) {\n        int root \u003d i;\n        while (true) {\n            int left \u003d 2 * root + 1;\n            int right \u003d 2 * root + 2;\n            int largest \u003d root;\n\n            if (asc) {\n                if (left \u003c n \u0026\u0026 result[left] \u003e result[largest]) {\n                    largest \u003d left;\n                }\n                if (right \u003c n \u0026\u0026 result[right] \u003e result[largest]) {\n                    largest \u003d right;\n                }\n            } else {\n                if (left \u003c n \u0026\u0026 result[left] \u003c result[largest]) {\n                    largest \u003d left;\n                }\n                if (right \u003c n \u0026\u0026 result[right] \u003c result[largest]) {\n                    largest \u003d right;\n                }\n            }\n\n            if (largest !\u003d root) {\n                int swap \u003d result[root];\n                result[root] \u003d result[largest];\n                result[largest] \u003d swap;\n                root \u003d largest;\n            } else {\n                break;\n            }\n        }\n    }\n\n    for (int i \u003d n - 1; i \u003e 0; i--) {\n        int swap \u003d result[0];\n        result[0] \u003d result[i];\n        result[i] \u003d swap;\n\n        int root \u003d 0;\n        while (true) {\n            int left \u003d 2 * root + 1;\n            int right \u003d 2 * root + 2;\n            int largest \u003d root;\n\n            if (asc) {\n                if (left \u003c i \u0026\u0026 result[left] \u003e result[largest]) {\n                    largest \u003d left;\n                }\n                if (right \u003c i \u0026\u0026 result[right] \u003e result[largest]) {\n                    largest \u003d right;\n                }\n            } else {\n                if (left \u003c i \u0026\u0026 result[left] \u003c result[largest]) {\n                    largest \u003d left;\n                }\n                if (right \u003c i \u0026\u0026 result[right] \u003c result[largest]) {\n                    largest \u003d right;\n                }\n            }\n\n            if (largest !\u003d root) {\n                swap \u003d result[root];\n                result[root] \u003d result[largest];\n                result[largest] \u003d swap;\n                root \u003d largest;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]