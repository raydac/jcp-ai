[{
  "uuid": "1bd7ab5d-75d8-41d2-89a1-b23e15f4c0f1",
  "instant": "2025-08-02T07:56:22.595321322Z",
  "key": "elrlZLXhs/YoWYcttFkjorNW6gGeKgsnZG9PvG3Zm08TElGS2jL/bV4p1Euhza7YDCaPu4ZMyr7WvNinVW68k2feKtdtJ6fcWVGNK1Jb2xc=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an array of integers using the HeapSort algorithm.\n * This method prioritizes speed and aims for minimal memory overhead for the sorting algorithm itself.\n * It returns a new array with sorted values if the input array needs sorting (length > 1),\n * otherwise, it returns the original array reference.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return A new array with sorted values, or the original array if it's null, empty, or contains a single element.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] result = java.util.Arrays.copyOf(array, array.length);\n\n    int n = result.length;\n\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int rootIndex = i;\n        while (true) {\n            int leftChild = 2 * rootIndex + 1;\n            int rightChild = 2 * rootIndex + 2;\n            int selectedChild = rootIndex;\n\n            if (asc) {\n                if (leftChild < n && result[leftChild] > result[selectedChild]) {\n                    selectedChild = leftChild;\n                }\n                if (rightChild < n && result[rightChild] > result[selectedChild]) {\n                    selectedChild = rightChild;\n                }\n            } else {\n                if (leftChild < n && result[leftChild] < result[selectedChild]) {\n                    selectedChild = leftChild;\n                }\n                if (rightChild < n && result[rightChild] < result[selectedChild]) {\n                    selectedChild = rightChild;\n                }\n            }\n\n            if (selectedChild != rootIndex) {\n                int temp = result[rootIndex];\n                result[rootIndex] = result[selectedChild];\n                result[selectedChild] = temp;\n                rootIndex = selectedChild;\n            } else {\n                break;\n            }\n        }\n    }\n\n    for (int i = n - 1; i > 0; i--) {\n        int temp = result[0];\n        result[0] = result[i];\n        result[i] = temp;\n\n        int rootIndex = 0;\n        int currentHeapSize = i;\n        while (true) {\n            int leftChild = 2 * rootIndex + 1;\n            int rightChild = 2 * rootIndex + 2;\n            int selectedChild = rootIndex;\n\n            if (asc) {\n                if (leftChild < currentHeapSize && result[leftChild] > result[selectedChild]) {\n                    selectedChild = leftChild;\n                }\n                if (rightChild < currentHeapSize && result[rightChild] > result[selectedChild]) {\n                    selectedChild = rightChild;\n                }\n            } else {\n                if (leftChild < currentHeapSize && result[leftChild] < result[selectedChild]) {\n                    selectedChild = leftChild;\n                }\n                if (rightChild < currentHeapSize && result[rightChild] < result[selectedChild]) {\n                    selectedChild = rightChild;\n                }\n            }\n\n            if (selectedChild != rootIndex) {\n                int tempSwap = result[rootIndex];\n                result[rootIndex] = result[selectedChild];\n                result[selectedChild] = tempSwap;\n                rootIndex = selectedChild;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return result;\n}",
  "sinceUse": 0
}]