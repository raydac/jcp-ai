[
  {
    "instant": "2025-10-19T12:03:42.064179215Z",
    "key": "aIL07sGJMzG2GmAp8eOAy0UxwKufID4dho0sjjHrRNYNqKobwcmZq1dXVFx1f0f5p7CndxvgvS9LgCTZ2UXQSMRl1Y+rvt+1z/uM05IUAyM\u003d",
    "fileName": "ArraySorter.java",
    "line": 30,
    "result": "public static void helloWorld() {\n    System.out.println(\"Hello, World!\");\n}",
    "sinceUse": 0
  },
  {
    "instant": "2025-10-19T12:03:41.315518302Z",
    "key": "bPKHHEZZNSCuQWtS0zPGWiBXh5yhgghEqNYgd+/+2PP17Rm+RnZFD95OD1vVGQqGRt5uTcy8Vrjjf3QRLv8BSVerkocMFw8wtl6OAX5hCTY\u003d",
    "fileName": "ArraySorter.java",
    "line": 25,
    "result": "/**\n      * Sorts an array of integers using a highly optimized quicksort algorithm with minimal memory overhead.\n      *\n      * @param array The array to be sorted.\n      * @param asc   A flag indicating whether to sort in ascending order (true) or descending order (false).\n      * @return A new sorted array, or the original array if it is null, empty, or contains only one element.\n      */\n     public static int [] fastSort(final int [] array, final boolean asc) {\n         if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n             return array;\n         }\n \n         int[] arr \u003d array.clone();\n         java.util.Random random \u003d new java.util.Random();\n \n         quicksort(arr, 0, arr.length - 1, asc, random);\n         return arr;\n     }\n \n     private static void quicksort(int[] arr, int low, int high, boolean asc, java.util.Random random) {\n         if (low \u003c high) {\n             int pivotIndex \u003d partition(arr, low, high, asc, random);\n             quicksort(arr, low, pivotIndex - 1, asc, random);\n             quicksort(arr, pivotIndex + 1, high, asc, random);\n         }\n     }\n \n     private static int partition(int[] arr, int low, int high, boolean asc, java.util.Random random) {\n         int randomIndex \u003d random.nextInt(high - low + 1) + low;\n         swap(arr, high, randomIndex);\n         int pivot \u003d arr[high];\n         int i \u003d (low - 1);\n \n         for (int j \u003d low; j \u003c high; j++) {\n             if ((asc \u0026\u0026 arr[j] \u003c\u003d pivot) || (!asc \u0026\u0026 arr[j] \u003e\u003d pivot)) {\n                 i++;\n                 swap(arr, i, j);\n             }\n         }\n         swap(arr, i + 1, high);\n         return i + 1;\n     }\n \n     private static void swap(int[] arr, int i, int j) {\n         int temp \u003d arr[i];\n         arr[i] \u003d arr[j];\n         arr[j] \u003d temp;\n     }",
    "sinceUse": 0
  }
]