[{
  "uuid": "2c72a9d0-47a2-40a7-8fa2-2f08d92b7848",
  "instant": "2025-08-07T06:20:41.730104802Z",
  "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an array of integers using the Heapsort algorithm, which provides O(N log N) time complexity\n * and O(1) auxiliary space complexity, making it efficient for large datasets with minimal memory overhead.\n * The method returns a new array with the sorted values, leaving the original array unchanged.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return A new array containing the sorted elements. Returns the original array if it is null, empty, or contains a single element.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] result = java.util.Arrays.copyOf(array, array.length);\n\n    int n = result.length;\n\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int rootIndex = i;\n        while (true) {\n            int largest = rootIndex;\n            int leftChild = 2 * rootIndex + 1;\n            int rightChild = 2 * rootIndex + 2;\n\n            if (leftChild < n && result[leftChild] > result[largest]) {\n                largest = leftChild;\n            }\n\n            if (rightChild < n && result[rightChild] > result[largest]) {\n                largest = rightChild;\n            }\n\n            if (largest != rootIndex) {\n                int swap = result[rootIndex];\n                result[rootIndex] = result[largest];\n                result[largest] = swap;\n                rootIndex = largest;\n            } else {\n                break;\n            }\n        }\n    }\n\n    for (int i = n - 1; i > 0; i--) {\n        int temp = result[0];\n        result[0] = result[i];\n        result[i] = temp;\n\n        int rootIndex = 0;\n        int currentHeapSize = i;\n        while (true) {\n            int largest = rootIndex;\n            int leftChild = 2 * rootIndex + 1;\n            int rightChild = 2 * rootIndex + 2;\n\n            if (leftChild < currentHeapSize && result[leftChild] > result[largest]) {\n                largest = leftChild;\n            }\n\n            if (rightChild < currentHeapSize && result[rightChild] > result[largest]) {\n                largest = rightChild;\n            }\n\n            if (largest != rootIndex) {\n                int swap = result[rootIndex];\n                result[rootIndex] = result[largest];\n                result[largest] = swap;\n                rootIndex = largest;\n            } else {\n                break;\n            }\n        }\n    }\n\n    if (!asc) {\n        for (int i = 0; i < n / 2; i++) {\n            int temp = result[i];\n            result[i] = result[n - 1 - i];\n            result[n - 1 - i] = temp;\n        }\n    }\n\n    return result;\n}",
  "sinceUse": 0
}]