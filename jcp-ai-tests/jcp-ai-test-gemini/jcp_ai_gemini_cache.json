[{
  "uuid": "a1c418d8-7607-490b-b4fe-5282521a0823",
  "instant": "2025-08-01T22:23:19.720953512Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an array of integers using an iterative QuickSort algorithm.\n * This method prioritizes speed and uses minimal memory overhead for the sorting process itself.\n * It returns a new array with sorted values, leaving the original array unchanged.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array is sorted in ascending order; otherwise, in descending order.\n * @return A new array containing the sorted values. Returns the original array reference if it is null, empty, or contains a single element.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] sortedArray = new int[array.length];\n    java.lang.System.arraycopy(array, 0, sortedArray, 0, array.length);\n\n    int[] stackLow = new int[sortedArray.length];\n    int[] stackHigh = new int[sortedArray.length];\n    int top = -1;\n\n    top++;\n    stackLow[top] = 0;\n    stackHigh[top] = sortedArray.length - 1;\n\n    while (top >= 0) {\n        int low = stackLow[top];\n        int high = stackHigh[top];\n        top--;\n\n        if (low < high) {\n            int pivotValue = sortedArray[high];\n            int i = low - 1;\n\n            for (int j = low; j < high; j++) {\n                if (sortedArray[j] <= pivotValue) {\n                    i++;\n                    int temp = sortedArray[i];\n                    sortedArray[i] = sortedArray[j];\n                    sortedArray[j] = temp;\n                }\n            }\n\n            int pi = i + 1;\n            int temp = sortedArray[pi];\n            sortedArray[pi] = sortedArray[high];\n            sortedArray[high] = temp;\n\n            if (pi + 1 < high) {\n                top++;\n                stackLow[top] = pi + 1;\n                stackHigh[top] = high;\n            }\n            if (low < pi - 1) {\n                top++;\n                stackLow[top] = low;\n                stackHigh[top] = pi - 1;\n            }\n        }\n    }\n\n    if (!asc) {\n        int start = 0;\n        int end = sortedArray.length - 1;\n        while (start < end) {\n            int temp = sortedArray[start];\n            sortedArray[start] = sortedArray[end];\n            sortedArray[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    return sortedArray;\n}",
  "sinceUse": 0
}]