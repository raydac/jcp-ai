[
  {
    "instant": "2025-08-22T22:08:13.961693647Z",
    "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using an iterative QuickSort algorithm.\n * This method prioritizes speed and minimal memory overhead.\n *\n * @param array The array to be sorted.\n * @param asc   If true, sort in ascending order; otherwise, sort in descending order.\n * @return The same incoming array if it is null, empty, or a single-value array.\n *         Otherwise, returns a new array with the sorted values.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int[] sortedArray \u003d new int[array.length];\n    for (int k \u003d 0; k \u003c array.length; k++) {\n        sortedArray[k] \u003d array[k];\n    }\n\n    int low \u003d 0;\n    int high \u003d sortedArray.length - 1;\n\n    int[] stack \u003d new int[sortedArray.length * 2];\n    int top \u003d -1;\n\n    stack[++top] \u003d low;\n    stack[++top] \u003d high;\n\n    while (top \u003e\u003d 0) {\n        high \u003d stack[top--];\n        low \u003d stack[top--];\n\n        while (low \u003c high) {\n            int pivotValue \u003d sortedArray[high];\n            int i \u003d low - 1;\n\n            for (int j \u003d low; j \u003c high; j++) {\n                boolean condition;\n                if (asc) {\n                    condition \u003d sortedArray[j] \u003c pivotValue;\n                } else {\n                    condition \u003d sortedArray[j] \u003e pivotValue;\n                }\n\n                if (condition) {\n                    i++;\n                    int temp \u003d sortedArray[i];\n                    sortedArray[i] \u003d sortedArray[j];\n                    sortedArray[j] \u003d temp;\n                }\n            }\n\n            int pivotIndex \u003d i + 1;\n            int temp \u003d sortedArray[pivotIndex];\n            sortedArray[pivotIndex] \u003d sortedArray[high];\n            sortedArray[high] \u003d temp;\n\n            if (pivotIndex - low \u003c high - pivotIndex) {\n                if (pivotIndex + 1 \u003c high) {\n                    stack[++top] \u003d pivotIndex + 1;\n                    stack[++top] \u003d high;\n                }\n                high \u003d pivotIndex - 1;\n            } else {\n                if (low \u003c pivotIndex - 1) {\n                    stack[++top] \u003d low;\n                    stack[++top] \u003d pivotIndex - 1;\n                }\n                low \u003d pivotIndex + 1;\n            }\n        }\n    }\n\n    return sortedArray;\n}",
    "sinceUse": 0
  }
]