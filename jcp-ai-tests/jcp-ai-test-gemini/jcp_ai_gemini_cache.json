[
  {
    "instant": "2025-08-10T07:23:54.207515851Z",
    "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using an iterative QuickSort algorithm.\n * This method prioritizes speed and has minimal memory overhead.\n * It handles ascending and descending order based on the \u0027asc\u0027 flag.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order; otherwise, in descending order.\n * @return A new array with sorted values, or the original array if it is null, empty, or contains a single value.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int[] result \u003d new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n\n    int[] stack \u003d new int[result.length * 2];\n    int top \u003d -1;\n\n    stack[++top] \u003d 0;\n    stack[++top] \u003d result.length - 1;\n\n    while (top \u003e\u003d 0) {\n        int high \u003d stack[top--];\n        int low \u003d stack[top--];\n\n        if (low \u003c high) {\n            int pivotValue \u003d result[high];\n            int i \u003d low;\n\n            for (int j \u003d low; j \u003c high; j++) {\n                if (asc) {\n                    if (result[j] \u003c\u003d pivotValue) {\n                        int temp \u003d result[i];\n                        result[i] \u003d result[j];\n                        result[j] \u003d temp;\n                        i++;\n                    }\n                } else {\n                    if (result[j] \u003e\u003d pivotValue) {\n                        int temp \u003d result[i];\n                        result[i] \u003d result[j];\n                        result[j] \u003d temp;\n                        i++;\n                    }\n                }\n            }\n\n            int temp \u003d result[i];\n            result[i] \u003d result[high];\n            result[high] \u003d temp;\n\n            int pi \u003d i;\n\n            if (pi - 1 \u003e low) {\n                stack[++top] \u003d low;\n                stack[++top] \u003d pi - 1;\n            }\n\n            if (pi + 1 \u003c high) {\n                stack[++top] \u003d pi + 1;\n                stack[++top] \u003d high;\n            }\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]