[
  {
    "instant": "2025-09-12T22:08:09.511737638Z",
    "key": "C/ECzN9DszGisj8us/MFtbkjMiTBWb0fLar68/CnNcZ+UCU0F3IxwFuvX26Ch5jPG+OuFlvqbNVpQeNl18ZAuRwCY4nOIGma5g+dT4bgtTM\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using a fast sorting algorithm with minimal memory overhead.\n * The speed of sorting is prioritized.\n *\n * @param array The array to be sorted. If null, empty, or a single-element array, it is returned as is.\n * @param asc   If true, the array is sorted in ascending order; otherwise, in descending order.\n * @return A new array with sorted values, or the original array if it was null, empty, or single-valued.\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int[] result \u003d java.util.Arrays.copyOf(array, array.length);\n\n    int n \u003d result.length;\n    int[] aux \u003d new int[n];\n\n    for (int len \u003d 1; len \u003c n; len *\u003d 2) {\n        for (int lo \u003d 0; lo \u003c n - len; lo +\u003d len + len) {\n            int mid \u003d lo + len - 1;\n            int hi \u003d java.lang.Math.min(lo + len + len - 1, n - 1);\n\n            for (int k \u003d lo; k \u003c\u003d hi; k++) {\n                aux[k] \u003d result[k];\n            }\n\n            int i \u003d lo;\n            int j \u003d mid + 1;\n            for (int k \u003d lo; k \u003c\u003d hi; k++) {\n                if (i \u003e mid) {\n                    result[k] \u003d aux[j++];\n                } else if (j \u003e hi) {\n                    result[k] \u003d aux[i++];\n                } else if (aux[j] \u003c aux[i]) {\n                    result[k] \u003d aux[j++];\n                } else {\n                    result[k] \u003d aux[i++];\n                }\n            }\n        }\n    }\n\n    if (!asc) {\n        for (int i \u003d 0; i \u003c n / 2; i++) {\n            int temp \u003d result[i];\n            result[i] \u003d result[n - 1 - i];\n            result[n - 1 - i] \u003d temp;\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]