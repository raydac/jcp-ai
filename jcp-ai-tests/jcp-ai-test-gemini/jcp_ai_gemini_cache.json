[
  {
    "instant": "2025-08-28T06:13:14.654550605Z",
    "key": "kCeQN6mLC/K4LPKNoh4QmIU1tNcH3o6NdysdIDNsL5U/TR55YTRMIjNI2NVGpaN0S0/rdZa4yk2ldIZsQBZFasFkxJ1DUtzGR2NVEq9U238\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers using an iterative QuickSort algorithm.\n * This method prioritizes speed and minimal memory overhead.\n * It returns a new array with sorted values, or the original array\n * if it is null, empty, or contains a single element.\n *\n * @param array The array of integers to be sorted.\n * @param asc   If true, the array will be sorted in ascending order;\n *              otherwise, it will be sorted in descending order.\n * @return A new array containing the sorted elements, or the original\n *         array if it was null, empty, or had a single element.\n */\npublic static int [] fastSort(final int [] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    int[] result \u003d new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n\n    int[] stack \u003d new int[array.length * 2];\n    int top \u003d -1;\n\n    stack[++top] \u003d 0;\n    stack[++top] \u003d result.length - 1;\n\n    while (top \u003e\u003d 0) {\n        int high \u003d stack[top--];\n        int low \u003d stack[top--];\n\n        if (low \u003c high) {\n            int pivotIndex \u003d low + (high - low) / 2;\n            int pivot \u003d result[pivotIndex];\n\n            int i \u003d low;\n            int j \u003d high;\n\n            while (i \u003c\u003d j) {\n                if (asc) {\n                    while (result[i] \u003c pivot) {\n                        i++;\n                    }\n                    while (result[j] \u003e pivot) {\n                        j--;\n                    }\n                } else { // Descending\n                    while (result[i] \u003e pivot) {\n                        i++;\n                    }\n                    while (result[j] \u003c pivot) {\n                        j--;\n                    }\n                }\n\n                if (i \u003c\u003d j) {\n                    int temp \u003d result[i];\n                    result[i] \u003d result[j];\n                    result[j] \u003d temp;\n                    i++;\n                    j--;\n                }\n            }\n\n            if (low \u003c j) {\n                stack[++top] \u003d low;\n                stack[++top] \u003d j;\n            }\n            if (i \u003c high) {\n                stack[++top] \u003d i;\n                stack[++top] \u003d high;\n            }\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]