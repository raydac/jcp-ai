[
  {
    "uuid": "a01fb473-2654-455b-9c72-90ff37098c4f",
    "instant": "2025-08-02T19:18:19.425465190Z",
    "key": "MKuW98l8zPDOsVPhn20yxMys+bLaUKDzf9ogIuKb3gPPnSBZbHXhXvCpSKt8SgWf2p589v8pLmgNzKVBjuCNxTgzWnzc+KRCCsb8iVCr7Bo=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers in ascending or descending order using an optimized\n * quicksort algorithm with minimal memory overhead. The method prioritizes speed\n * and implements sorting in-place where possible, returning a new sorted array\n * when the input is valid, or the original array when it is null, empty, or has\n * a single element.\n *\n * @param array the array to be sorted\n * @param asc   true for ascending order, false for descending order\n * @return the sorted array, or the original array if it is null, empty, or has\n *         a single element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n    int[] result = new int[array.length];\n    System.arraycopy(array, 0, result, 0, array.length);\n    quickSort(result, 0, result.length - 1, asc);\n    return result;\n}\n\nprivate static void quickSort(int[] arr, int low, int high, boolean asc) {\n    if (low < high) {\n        int pi = partition(arr, low, high, asc);\n        quickSort(arr, low, pi - 1, asc);\n        quickSort(arr, pi + 1, high, asc);\n    }\n}\n\nprivate static int partition(int[] arr, int low, int high, boolean asc) {\n    int pivot = arr[high];\n    int i = (low - 1);\n    for (int j = low; j < high; j++) {\n        boolean condition = asc ? arr[j] <= pivot : arr[j] >= pivot;\n        if (condition) {\n            i++;\n            swap(arr, i, j);\n        }\n    }\n    swap(arr, i + 1, high);\n    return i + 1;\n}\n\nprivate static void swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}",
    "sinceUse": 0
  }
]