[
  {
    "instant": "2025-08-13T10:43:07.904142703Z",
    "key": "MKuW98l8zPDOsVPhn20yxMys+bLaUKDzf9ogIuKb3gPPnSBZbHXhXvCpSKt8SgWf2p589v8pLmgNzKVBjuCNxTgzWnzc+KRCCsb8iVCr7Bo\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers in ascending or descending order using an optimized\n * in-place quicksort algorithm with minimal memory overhead.\n *\n * @param array the array to be sorted\n * @param asc   true for ascending order, false for descending order\n * @return the sorted array, or the original array if it is null, empty, or has a single element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n\n    java.util.Stack\u003cInteger\u003e stack \u003d new java.util.Stack\u003c\u003e();\n    stack.push(0);\n    stack.push(array.length - 1);\n\n    while (!stack.isEmpty()) {\n        int end \u003d stack.pop();\n        int start \u003d stack.pop();\n\n        if (start \u003e\u003d end) {\n            continue;\n        }\n\n        int pivotIndex \u003d partition(array, start, end, asc);\n\n        if (pivotIndex - start \u003e end - pivotIndex) {\n            stack.push(start);\n            stack.push(pivotIndex - 1);\n            stack.push(pivotIndex + 1);\n            stack.push(end);\n        } else {\n            stack.push(pivotIndex + 1);\n            stack.push(end);\n            stack.push(start);\n            stack.push(pivotIndex - 1);\n        }\n    }\n\n    return array;\n}\n\nprivate static int partition(int[] array, int start, int end, boolean asc) {\n    int pivot \u003d array[end];\n    int i \u003d start - 1;\n\n    for (int j \u003d start; j \u003c end; j++) {\n        boolean condition \u003d asc ? array[j] \u003c\u003d pivot : array[j] \u003e\u003d pivot;\n        if (condition) {\n            i++;\n            swap(array, i, j);\n        }\n    }\n\n    swap(array, i + 1, end);\n    return i + 1;\n}\n\nprivate static void swap(int[] array, int i, int j) {\n    int temp \u003d array[i];\n    array[i] \u003d array[j];\n    array[j] \u003d temp;\n}",
    "sinceUse": 0
  }
]