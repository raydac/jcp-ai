[
  {
    "uuid": "7e7701e2-b91f-4f35-96db-f114c67da0a3",
    "instant": "2025-08-09T08:52:49.570315815Z",
    "key": "MKuW98l8zPDOsVPhn20yxMys+bLaUKDzf9ogIuKb3gPPnSBZbHXhXvCpSKt8SgWf2p589v8pLmgNzKVBjuCNxTgzWnzc+KRCCsb8iVCr7Bo=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers in ascending or descending order using an optimized\n * quicksort algorithm with minimal memory overhead. The method prioritizes speed\n * and implements sorting in-place where possible, only creating a new array when\n * the input is valid for sorting.\n *\n * @param array the array to be sorted, may be null or empty\n * @param asc   true for ascending order, false for descending order\n * @return the sorted array, or the original array if it is null, empty, or has only one element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] result = new int[array.length];\n    System.arraycopy(array, 0, result, 0, array.length);\n\n    int low = 0;\n    int high = result.length - 1;\n    java.util.Stack<Integer> stack = new java.util.Stack<>();\n    stack.push(low);\n    stack.push(high);\n\n    while (!stack.isEmpty()) {\n        high = stack.pop();\n        low = stack.pop();\n\n        if (low < high) {\n            int pivotIndex = low - 1;\n            int pivot = result[high];\n            for (int i = low; i < high; i++) {\n                if ((asc && result[i] <= pivot) || (!asc && result[i] >= pivot)) {\n                    int temp = result[++pivotIndex];\n                    result[pivotIndex] = result[i];\n                    result[i] = temp;\n                }\n            }\n            int temp = result[pivotIndex + 1];\n            result[pivotIndex + 1] = result[high];\n            result[high] = temp;\n\n            int p = pivotIndex + 1;\n\n            if (p - low > high - p) {\n                stack.push(low);\n                stack.push(p - 1);\n                stack.push(p + 1);\n                stack.push(high);\n            } else {\n                stack.push(p + 1);\n                stack.push(high);\n                stack.push(low);\n                stack.push(p - 1);\n            }\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]