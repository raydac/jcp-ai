[
  {
    "uuid": "a991a852-df48-42a1-9953-1877f391d3e6",
    "instant": "2025-08-02T07:57:30.645526749Z",
    "key": "ObOEdHqeAjd6ZUuQkvaiS5Ol0AGM7vxvqm2WUHodJA1gR9dfcRHHWejIWOEXwJ30zhXmATjpdiOI11ZulB4DS7AHD+WJkAIBlTHlsT7OLNA=",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers in ascending or descending order using an optimized\n * quicksort algorithm with minimal memory overhead. The method prioritizes speed\n * and implements the sorting logic within a single method without external dependencies.\n *\n * @param array the array to be sorted, may be null or empty\n * @param asc   true for ascending order, false for descending order\n * @return the sorted array, or the original array if it is null, empty, or has only one element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n\n    int[] result = new int[array.length];\n    System.arraycopy(array, 0, result, 0, array.length);\n\n    java.util.Stack<Integer> stack = new java.util.Stack<>();\n    stack.push(0);\n    stack.push(result.length - 1);\n\n    while (!stack.isEmpty()) {\n        int high = stack.pop();\n        int low = stack.pop();\n\n        if (low >= high) {\n            continue;\n        }\n\n        int pivot = result[low];\n        int i = low;\n        int j = high;\n\n        while (i <= j) {\n            if (asc) {\n                while (result[i] < pivot) i++;\n                while (result[j] > pivot) j--;\n            } else {\n                while (result[i] > pivot) i++;\n                while (result[j] < pivot) j--;\n            }\n\n            if (i <= j) {\n                int temp = result[i];\n                result[i] = result[j];\n                result[j] = temp;\n                i++;\n                j--;\n            }\n        }\n\n        if (j - low < high - i) {\n            if (low < j) {\n                stack.push(low);\n                stack.push(j);\n            }\n            if (i < high) {\n                stack.push(i);\n                stack.push(high);\n            }\n        } else {\n            if (i < high) {\n                stack.push(i);\n                stack.push(high);\n            }\n            if (low < j) {\n                stack.push(low);\n                stack.push(j);\n            }\n        }\n    }\n\n    return result;\n}",
    "sinceUse": 0
  }
]