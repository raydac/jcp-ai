[
  {
    "instant": "2025-08-10T07:26:11.235056649Z",
    "key": "MKuW98l8zPDOsVPhn20yxMys+bLaUKDzf9ogIuKb3gPPnSBZbHXhXvCpSKt8SgWf2p589v8pLmgNzKVBjuCNxTgzWnzc+KRCCsb8iVCr7Bo\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts an array of integers in ascending or descending order using an optimized\n * quicksort algorithm with minimal memory overhead. The method prioritizes speed\n * and implements sorting in-place where possible, only creating a new array when\n * the input is valid for sorting.\n *\n * @param array the array to be sorted, may be null or empty\n * @param asc   true for ascending order, false for descending order\n * @return the sorted array, or the original array if it is null, empty, or has only one element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n    \n    int[] result \u003d new int[array.length];\n    System.arraycopy(array, 0, result, 0, array.length);\n    \n    quickSort(result, 0, result.length - 1);\n    \n    if (!asc) {\n        reverseArray(result);\n    }\n    \n    return result;\n}\n\nprivate static void quickSort(int[] arr, int low, int high) {\n    if (low \u003c high) {\n        int pi \u003d partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nprivate static int partition(int[] arr, int low, int high) {\n    int pivot \u003d arr[high];\n    int i \u003d (low - 1);\n    \n    for (int j \u003d low; j \u003c high; j++) {\n        if (arr[j] \u003c\u003d pivot) {\n            i++;\n            swap(arr, i, j);\n        }\n    }\n    \n    swap(arr, i + 1, high);\n    return i + 1;\n}\n\nprivate static void swap(int[] arr, int i, int j) {\n    int temp \u003d arr[i];\n    arr[i] \u003d arr[j];\n    arr[j] \u003d temp;\n}\n\nprivate static void reverseArray(int[] arr) {\n    int start \u003d 0;\n    int end \u003d arr.length - 1;\n    while (start \u003c end) {\n        swap(arr, start, end);\n        start++;\n        end--;\n    }\n}",
    "sinceUse": 0
  }
]