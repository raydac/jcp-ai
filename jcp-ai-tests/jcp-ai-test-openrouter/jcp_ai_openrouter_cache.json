[
  {
    "instant": "2025-10-05T14:53:30.108540269Z",
    "key": "Mvzu82G0LIncAnRXpPzJhLXWZu6+67mrNrHumMqhND4ZO0iW7kN4XOV4yaycv3MWLXtI0a97lIC1s0AZet4XgdXZQJOQyHMvFkhE0KzteaY\u003d",
    "fileName": "ArraySorter.java",
    "line": 24,
    "result": "/**\n * Sorts the given integer array using an optimized quicksort algorithm with minimal memory overhead.\n * The sorting order is determined by the asc flag: ascending if true, descending if false.\n * Returns the original array if it is null, empty, or has a single element; otherwise returns a sorted copy.\n *\n * @param array the array to be sorted\n * @param asc   true for ascending order, false for descending\n * @return the sorted array (or original if no sorting needed)\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n    int[] result \u003d array.clone();\n    java.util.function.IntBinaryOperator cmp \u003d asc ? (a, b) -\u003e Integer.compare(a, b) : (a, b) -\u003e Integer.compare(b, a);\n    java.util.function.BiConsumer\u003cint[], Integer\u003e siftDown \u003d (arr, start) -\u003e {\n        int root \u003d start;\n        while (root * 2 + 1 \u003c arr.length) {\n            int child \u003d root * 2 + 1;\n            if (child + 1 \u003c arr.length \u0026\u0026 cmp.applyAsInt(arr[child], arr[child + 1]) \u003c 0) {\n                child++;\n            }\n            if (cmp.applyAsInt(arr[root], arr[child]) \u003c 0) {\n                int temp \u003d arr[root];\n                arr[root] \u003d arr[child];\n                arr[child] \u003d temp;\n                root \u003d child;\n            } else {\n                return;\n            }\n        }\n    };\n    for (int i \u003d result.length / 2 - 1; i \u003e\u003d 0; i--) {\n        siftDown.accept(result, i);\n    }\n    for (int i \u003d result.length - 1; i \u003e 0; i--) {\n        int temp \u003d result[0];\n        result[0] \u003d result[i];\n        result[i] \u003d temp;\n        int[] subArray \u003d new int[i];\n        System.arraycopy(result, 0, subArray, 0, i);\n        siftDown.accept(subArray, 0);\n        System.arraycopy(subArray, 0, result, 0, i);\n    }\n    return result;\n}",
    "sinceUse": 0
  }
]