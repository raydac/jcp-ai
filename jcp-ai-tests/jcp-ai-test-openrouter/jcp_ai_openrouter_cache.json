[
  {
    "instant": "2025-09-12T22:10:43.545501900Z",
    "key": "Mvzu82G0LIncAnRXpPzJhLXWZu6+67mrNrHumMqhND4ZO0iW7kN4XOV4yaycv3MWLXtI0a97lIC1s0AZet4XgdXZQJOQyHMvFkhE0KzteaY\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given integer array using an optimized quicksort algorithm with minimal memory overhead.\n * The algorithm prioritizes speed and uses iterative quicksort with a stack to avoid recursion overhead.\n * The sort order is determined by the asc flag: ascending if true, descending if false.\n * Returns the original array if it is null, empty, or has a single element; otherwise returns a sorted copy.\n *\n * @param array the array to be sorted\n * @param asc   true for ascending order, false for descending\n * @return the sorted array (or original if trivial)\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n    int[] result \u003d array.clone();\n    int[] stack \u003d new int[64];\n    int top \u003d -1;\n    stack[++top] \u003d 0;\n    stack[++top] \u003d result.length - 1;\n    while (top \u003e\u003d 0) {\n        int high \u003d stack[top--];\n        int low \u003d stack[top--];\n        if (low \u003c high) {\n            int pivotIndex;\n            if (high - low \u003e 47) {\n                int mid \u003d low + (high - low) / 2;\n                if (result[low] \u003e result[mid]) {\n                    int temp \u003d result[low];\n                    result[low] \u003d result[mid];\n                    result[mid] \u003d temp;\n                }\n                if (result[low] \u003e result[high]) {\n                    int temp \u003d result[low];\n                    result[low] \u003d result[high];\n                    result[high] \u003d temp;\n                }\n                if (result[mid] \u003e result[high]) {\n                    int temp \u003d result[mid];\n                    result[mid] \u003d result[high];\n                    result[high] \u003d temp;\n                }\n                pivotIndex \u003d mid;\n            } else {\n                pivotIndex \u003d low + (high - low) / 2;\n            }\n            int pivot \u003d result[pivotIndex];\n            int i \u003d low;\n            int j \u003d high;\n            while (i \u003c\u003d j) {\n                while (result[i] \u003c pivot) i++;\n                while (result[j] \u003e pivot) j--;\n                if (i \u003c\u003d j) {\n                    int temp \u003d result[i];\n                    result[i] \u003d result[j];\n                    result[j] \u003d temp;\n                    i++;\n                    j--;\n                }\n            }\n            if (low \u003c j) {\n                stack[++top] \u003d low;\n                stack[++top] \u003d j;\n            }\n            if (i \u003c high) {\n                stack[++top] \u003d i;\n                stack[++top] \u003d high;\n            }\n        }\n    }\n    if (!asc) {\n        int left \u003d 0;\n        int right \u003d result.length - 1;\n        while (left \u003c right) {\n            int temp \u003d result[left];\n            result[left] \u003d result[right];\n            result[right] \u003d temp;\n            left++;\n            right--;\n        }\n    }\n    return result;\n}",
    "sinceUse": 0
  }
]