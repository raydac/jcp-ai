[{
  "uuid": "7344c70c-da50-4ffb-9956-a12f4bdb8ea7",
  "instant": "2025-08-01T22:23:38.236438618Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an integer array using dual-pivot quicksort algorithm with minimal memory overhead.\n * Returns the same array if null, empty, or single element, otherwise returns a new sorted array.\n * \n * @param array the array to be sorted\n * @param asc true for ascending order, false for descending order\n * @return sorted array or original array if no sorting needed\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n    \n    int[] result = new int[array.length];\n    System.arraycopy(array, 0, result, 0, array.length);\n    \n    java.util.ArrayDeque<Integer> stack = new java.util.ArrayDeque<>();\n    stack.push(0);\n    stack.push(result.length - 1);\n    \n    while (!stack.isEmpty()) {\n        int high = stack.pop();\n        int low = stack.pop();\n        \n        if (low < high) {\n            if (high - low < 47) {\n                for (int i = low + 1; i <= high; i++) {\n                    int key = result[i];\n                    int j = i - 1;\n                    while (j >= low && ((asc && result[j] > key) || (!asc && result[j] < key))) {\n                        result[j + 1] = result[j];\n                        j--;\n                    }\n                    result[j + 1] = key;\n                }\n            } else {\n                int third = (high - low) / 3;\n                int m1 = low + third;\n                int m2 = high - third;\n                \n                if (result[m1] > result[m2]) {\n                    int temp = result[m1];\n                    result[m1] = result[m2];\n                    result[m2] = temp;\n                }\n                if (result[low] > result[m1]) {\n                    int temp = result[low];\n                    result[low] = result[m1];\n                    result[m1] = temp;\n                }\n                if (result[m2] > result[high]) {\n                    int temp = result[m2];\n                    result[m2] = result[high];\n                    result[high] = temp;\n                }\n                if (result[m1] > result[m2]) {\n                    int temp = result[m1];\n                    result[m1] = result[m2];\n                    result[m2] = temp;\n                }\n                if (result[low] > result[m1]) {\n                    int temp = result[low];\n                    result[low] = result[m1];\n                    result[m1] = temp;\n                }\n                if (result[m2] > result[high]) {\n                    int temp = result[m2];\n                    result[m2] = result[high];\n                    result[high] = temp;\n                }\n                \n                int pivot1 = result[m1];\n                int pivot2 = result[m2];\n                \n                result[m1] = result[low];\n                result[m2] = result[high];\n                \n                int less = low + 1;\n                int great = high - 1;\n                \n                for (int k = less; k <= great; k++) {\n                    if (asc ? result[k] < pivot1 : result[k] > pivot1) {\n                        int temp = result[k];\n                        result[k] = result[less];\n                        result[less] = temp;\n                        less++;\n                    } else if (asc ? result[k] > pivot2 : result[k] < pivot2) {\n                        while (k < great && (asc ? result[great] > pivot2 : result[great] < pivot2)) {\n                            great--;\n                        }\n                        int temp = result[k];\n                        result[k] = result[great];\n                        result[great] = temp;\n                        great--;\n                        if (asc ? result[k] < pivot1 : result[k] > pivot1) {\n                            temp = result[k];\n                            result[k] = result[less];\n                            result[less] = temp;\n                            less++;\n                        }\n                    }\n                }\n                \n                result[low] = result[less - 1];\n                result[less - 1] = pivot1;\n                result[high] = result[great + 1];\n                result[great + 1] = pivot2;\n                \n                stack.push(low);\n                stack.push(less - 2);\n                stack.push(less);\n                stack.push(great);\n                stack.push(great + 2);\n                stack.push(high);\n            }\n        }\n    }\n    \n    return result;\n}",
  "sinceUse": 0
}]