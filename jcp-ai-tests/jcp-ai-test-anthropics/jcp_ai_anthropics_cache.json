[{
  "uuid": "c15c1451-9734-4f4b-8a65-bf45c6e42a2c",
  "instant": "2025-08-09T05:53:13.183610725Z",
  "key": "jpdzisBoEyg1/iRc+WbHiIn1Sbk5cSiC4VXZyFBkUpQIoaH65QQLfpuCGqAI6DEFfDkE6KEC29rIIFWUHquovyLA1xy9UC8P2wyR7nwUT38=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an integer array using dual-pivot quicksort algorithm with minimal memory overhead.\n * Returns the original array if null, empty, or contains single element.\n * Otherwise returns a new sorted array with the specified order.\n *\n * @param array the array to be sorted\n * @param asc true for ascending order, false for descending order\n * @return sorted array or original array if no sorting needed\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n    \n    int[] result = new int[array.length];\n    java.lang.System.arraycopy(array, 0, result, 0, array.length);\n    \n    java.util.ArrayDeque<Integer> stack = new java.util.ArrayDeque<>();\n    stack.push(0);\n    stack.push(result.length - 1);\n    \n    while (!stack.isEmpty()) {\n        int high = stack.pop();\n        int low = stack.pop();\n        \n        if (low < high) {\n            if (high - low < 47) {\n                for (int i = low + 1; i <= high; i++) {\n                    int key = result[i];\n                    int j = i - 1;\n                    while (j >= low && ((asc && result[j] > key) || (!asc && result[j] < key))) {\n                        result[j + 1] = result[j];\n                        j--;\n                    }\n                    result[j + 1] = key;\n                }\n            } else {\n                int pivot1 = result[low];\n                int pivot2 = result[high];\n                \n                if ((asc && pivot1 > pivot2) || (!asc && pivot1 < pivot2)) {\n                    result[low] = pivot2;\n                    result[high] = pivot1;\n                    pivot1 = result[low];\n                    pivot2 = result[high];\n                }\n                \n                int less = low + 1;\n                int great = high - 1;\n                \n                for (int k = less; k <= great; k++) {\n                    if ((asc && result[k] < pivot1) || (!asc && result[k] > pivot1)) {\n                        int temp = result[k];\n                        result[k] = result[less];\n                        result[less] = temp;\n                        less++;\n                    } else if ((asc && result[k] > pivot2) || (!asc && result[k] < pivot2)) {\n                        while (k < great && ((asc && result[great] > pivot2) || (!asc && result[great] < pivot2))) {\n                            great--;\n                        }\n                        int temp = result[k];\n                        result[k] = result[great];\n                        result[great] = temp;\n                        great--;\n                        \n                        if ((asc && result[k] < pivot1) || (!asc && result[k] > pivot1)) {\n                            temp = result[k];\n                            result[k] = result[less];\n                            result[less] = temp;\n                            less++;\n                        }\n                    }\n                }\n                \n                int dist1 = less - low;\n                int dist2 = high - great;\n                \n                if (dist1 == 1) {\n                    result[low] = result[less - 1];\n                    result[less - 1] = pivot1;\n                } else if (dist1 == 0) {\n                    less--;\n                    result[less] = pivot1;\n                }\n                \n                if (dist2 == 1) {\n                    result[high] = result[great + 1];\n                    result[great + 1] = pivot2;\n                } else if (dist2 == 0) {\n                    great++;\n                    result[great] = pivot2;\n                }\n                \n                if (less - 2 - low <= high - (great + 2)) {\n                    if (low < less - 2) {\n                        stack.push(low);\n                        stack.push(less - 2);\n                    }\n                    if (great + 2 < high) {\n                        stack.push(great + 2);\n                        stack.push(high);\n                    }\n                } else {\n                    if (great + 2 < high) {\n                        stack.push(great + 2);\n                        stack.push(high);\n                    }\n                    if (low < less - 2) {\n                        stack.push(low);\n                        stack.push(less - 2);\n                    }\n                }\n                \n                if (less < great) {\n                    stack.push(less);\n                    stack.push(great);\n                }\n            }\n        }\n    }\n    \n    return result;\n}",
  "sinceUse": 0
}]