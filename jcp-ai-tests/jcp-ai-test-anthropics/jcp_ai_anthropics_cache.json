[{
  "uuid": "3010f191-7f84-40e3-bcea-2648630ed389",
  "instant": "2025-08-09T08:45:19.307634355Z",
  "key": "jpdzisBoEyg1/iRc+WbHiIn1Sbk5cSiC4VXZyFBkUpQIoaH65QQLfpuCGqAI6DEFfDkE6KEC29rIIFWUHquovyLA1xy9UC8P2wyR7nwUT38=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Performs fast sorting of integer array using dual-pivot quicksort algorithm.\n * Returns the same array if null, empty, or single element, otherwise returns\n * a new sorted array with minimal memory overhead.\n *\n * @param array the integer array to sort\n * @param asc true for ascending order, false for descending order\n * @return sorted array or original array if no sorting needed\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length <= 1) {\n        return array;\n    }\n    \n    int[] result = array.clone();\n    int length = result.length;\n    \n    int[] stack = new int[64];\n    int top = 0;\n    stack[top++] = 0;\n    stack[top++] = length - 1;\n    \n    while (top > 0) {\n        int high = stack[--top];\n        int low = stack[--top];\n        \n        if (low < high) {\n            if (high - low < 47) {\n                for (int i = low + 1; i <= high; i++) {\n                    int key = result[i];\n                    int j = i - 1;\n                    while (j >= low && ((asc && result[j] > key) || (!asc && result[j] < key))) {\n                        result[j + 1] = result[j];\n                        j--;\n                    }\n                    result[j + 1] = key;\n                }\n            } else {\n                int third = (high - low) / 3;\n                int m1 = low + third;\n                int m2 = high - third;\n                \n                if (result[m1] < result[m2]) {\n                    if (!asc) {\n                        int temp = result[m1];\n                        result[m1] = result[m2];\n                        result[m2] = temp;\n                    }\n                } else {\n                    if (asc) {\n                        int temp = result[m1];\n                        result[m1] = result[m2];\n                        result[m2] = temp;\n                    }\n                }\n                \n                int pivot1 = result[m1];\n                int pivot2 = result[m2];\n                \n                result[m1] = result[low];\n                result[m2] = result[high];\n                \n                int less = low + 1;\n                int great = high - 1;\n                \n                for (int k = less; k <= great; k++) {\n                    if (asc ? result[k] < pivot1 : result[k] > pivot1) {\n                        int temp = result[k];\n                        result[k] = result[less];\n                        result[less] = temp;\n                        less++;\n                    } else if (asc ? result[k] > pivot2 : result[k] < pivot2) {\n                        while (k < great && (asc ? result[great] > pivot2 : result[great] < pivot2)) {\n                            great--;\n                        }\n                        int temp = result[k];\n                        result[k] = result[great];\n                        result[great] = temp;\n                        great--;\n                        if (asc ? result[k] < pivot1 : result[k] > pivot1) {\n                            temp = result[k];\n                            result[k] = result[less];\n                            result[less] = temp;\n                            less++;\n                        }\n                    }\n                }\n                \n                result[low] = result[less - 1];\n                result[less - 1] = pivot1;\n                result[high] = result[great + 1];\n                result[great + 1] = pivot2;\n                \n                stack[top++] = low;\n                stack[top++] = less - 2;\n                stack[top++] = great + 2;\n                stack[top++] = high;\n                \n                if (less < m1 && m2 < great) {\n                    while (result[less] == pivot1) {\n                        less++;\n                    }\n                    while (result[great] == pivot2) {\n                        great--;\n                    }\n                    \n                    for (int k = less; k <= great; k++) {\n                        if (result[k] == pivot1) {\n                            int temp = result[k];\n                            result[k] = result[less];\n                            result[less] = temp;\n                            less++;\n                        } else if (result[k] == pivot2) {\n                            int temp = result[k];\n                            result[k] = result[great];\n                            result[great] = temp;\n                            great--;\n                            if (result[k] == pivot1) {\n                                temp = result[k];\n                                result[k] = result[less];\n                                result[less] = temp;\n                                less++;\n                            }\n                        }\n                    }\n                }\n                \n                stack[top++] = less;\n                stack[top++] = great;\n            }\n        }\n    }\n    \n    return result;\n}",
  "sinceUse": 0
}]