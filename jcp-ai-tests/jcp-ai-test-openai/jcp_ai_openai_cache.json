[{
  "uuid": "4198db22-89a8-40da-97d6-21d016058bf8",
  "instant": "2025-07-25T06:02:53.695779754Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the specified array of integers using an in-place dual-pivot quicksort for speed and minimal memory overhead.\n * Returns the input array if it is null, empty, or of size 1, otherwise returns a new sorted array (ascending or descending).\n * No external libraries or helper classes/methods are used.\n *\n * @param array the array to sort\n * @param asc   true for ascending order, false for descending\n * @return the sorted array (same or new instance as per input)\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    final int[] a = java.util.Arrays.copyOf(array, array.length);\n    final int len = a.length;\n    java.util.ArrayDeque<int[]> stack = new java.util.ArrayDeque<>();\n    stack.push(new int[]{0, len - 1});\n    while (!stack.isEmpty()) {\n        int[] bounds = stack.pop();\n        int low = bounds[0], high = bounds[1];\n        while (low < high) {\n            int p1 = low, p2 = high;\n            int pivot1 = a[low], pivot2 = a[high];\n            if ((asc ? pivot1 > pivot2 : pivot1 < pivot2)) {\n                int t = pivot1; pivot1 = pivot2; pivot2 = t;\n                a[low] = pivot1; a[high] = pivot2;\n            }\n            int i = low + 1, lt = low + 1, gt = high - 1;\n            while (i <= gt) {\n                int v = a[i];\n                if (asc ? v < pivot1 : v > pivot1) {\n                    a[i] = a[lt]; a[lt] = v; lt++; i++;\n                } else if (asc ? v > pivot2 : v < pivot2) {\n                    a[i] = a[gt]; a[gt] = v; gt--;\n                } else {\n                    i++;\n                }\n            }\n            lt--; gt++;\n            a[low] = a[lt]; a[lt] = pivot1;\n            a[high] = a[gt]; a[gt] = pivot2;\n            if (lt - low < high - gt) {\n                stack.push(new int[]{gt + 1, high});\n                stack.push(new int[]{lt + 1, gt - 1});\n                high = lt - 1;\n            } else {\n                stack.push(new int[]{low, lt - 1});\n                stack.push(new int[]{lt + 1, gt - 1});\n                low = gt + 1;\n            }\n        }\n    }\n    return a;\n}"
}]