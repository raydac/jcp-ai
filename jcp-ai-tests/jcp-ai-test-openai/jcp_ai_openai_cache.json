[
  {
    "instant": "2025-08-10T07:24:53.059890028Z",
    "key": "JwczFQkRi2Zg3xhUyf6W/AmYQ5kcV3uURwixbOrhl4LoEObCv8opaLuXOUNjbRhs78yzYjPOca09mfWrmFGRzXVafnmW4+ZJMFHIWynJd+0\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the provided int array using an iterative 3-way quicksort with insertion sort on small partitions.\n * If the array is null, empty, or has a single element, the same reference is returned.\n * Otherwise, a new array instance containing the sorted values is returned.\n * Sorting is ascending when asc is true, descending otherwise.\n *\n * @param array the array to sort\n * @param asc true for ascending order, false for descending order\n * @return the same array reference for null/empty/single-element input; otherwise a new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) return array;\n    final int n \u003d array.length;\n    final int[] a \u003d new int[n];\n    System.arraycopy(array, 0, a, 0, n);\n    final int threshold \u003d 24;\n    final int[] stack \u003d new int[128];\n    int top \u003d 0;\n    int lo \u003d 0, hi \u003d n - 1;\n    while (true) {\n        while (hi - lo \u003e\u003d threshold) {\n            int mid \u003d (lo + hi) \u003e\u003e\u003e 1;\n            int x \u003d a[lo], y \u003d a[mid], z \u003d a[hi];\n            int pivot;\n            if (x \u003c y) {\n                if (y \u003c z) pivot \u003d y;\n                else if (x \u003c z) pivot \u003d z;\n                else pivot \u003d x;\n            } else {\n                if (x \u003c z) pivot \u003d x;\n                else if (y \u003c z) pivot \u003d z;\n                else pivot \u003d y;\n            }\n            int i \u003d lo, lt \u003d lo, gt \u003d hi;\n            if (asc) {\n                while (i \u003c\u003d gt) {\n                    int ai \u003d a[i];\n                    if (ai \u003c pivot) { int t \u003d a[lt]; a[lt] \u003d ai; a[i] \u003d t; lt++; i++; }\n                    else if (ai \u003e pivot) { int t \u003d a[gt]; a[gt] \u003d ai; a[i] \u003d t; gt--; }\n                    else { i++; }\n                }\n            } else {\n                while (i \u003c\u003d gt) {\n                    int ai \u003d a[i];\n                    if (ai \u003e pivot) { int t \u003d a[lt]; a[lt] \u003d ai; a[i] \u003d t; lt++; i++; }\n                    else if (ai \u003c pivot) { int t \u003d a[gt]; a[gt] \u003d ai; a[i] \u003d t; gt--; }\n                    else { i++; }\n                }\n            }\n            int leftSize \u003d lt - lo;\n            int rightSize \u003d hi - gt;\n            if (leftSize \u003e rightSize) {\n                if (leftSize \u003e 1) { stack[top++] \u003d lo; stack[top++] \u003d lt - 1; }\n                lo \u003d gt + 1;\n            } else {\n                if (rightSize \u003e 1) { stack[top++] \u003d gt + 1; stack[top++] \u003d hi; }\n                hi \u003d lt - 1;\n            }\n        }\n        for (int i \u003d lo + 1; i \u003c\u003d hi; i++) {\n            int v \u003d a[i];\n            int j \u003d i - 1;\n            if (asc) {\n                while (j \u003e\u003d lo \u0026\u0026 a[j] \u003e v) { a[j + 1] \u003d a[j]; j--; }\n            } else {\n                while (j \u003e\u003d lo \u0026\u0026 a[j] \u003c v) { a[j + 1] \u003d a[j]; j--; }\n            }\n            a[j + 1] \u003d v;\n        }\n        if (top \u003d\u003d 0) break;\n        hi \u003d stack[--top];\n        lo \u003d stack[--top];\n    }\n    return a;\n}",
    "sinceUse": 0
  }
]