[{
  "uuid": "5841d8b1-64f0-4dab-b530-fcde2f1e9201",
  "instant": "2025-07-30T19:49:51.765899828Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the given int array using an optimized QuickSort algorithm with minimal memory overhead, prioritizing speed.\n * Returns the original array if it is null, empty or contains a single element; otherwise, returns a sorted array.\n * The sorting order is determined by the 'asc' flag: true for ascending, false for descending.\n * No external helpers or libraries are used.\n *\n * @param array the int array to sort\n * @param asc if true, sorts in ascending order; otherwise, descending\n * @return a sorted int array in the specified order\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    final int[] arr = java.util.Arrays.copyOf(array, array.length);\n    int[] stack = new int[arr.length * 2];\n    int top = 0, start = 0, end = arr.length - 1;\n    stack[top++] = start;\n    stack[top++] = end;\n    while (top > 0) {\n        end = stack[--top];\n        start = stack[--top];\n        while (start < end) {\n            int pivot = arr[start + ((end - start) >>> 1)];\n            int i = start, j = end;\n            while (i <= j) {\n                if (asc) {\n                    while (arr[i] < pivot) i++;\n                    while (arr[j] > pivot) j--;\n                } else {\n                    while (arr[i] > pivot) i++;\n                    while (arr[j] < pivot) j--;\n                }\n                if (i <= j) {\n                    int t = arr[i];\n                    arr[i++] = arr[j];\n                    arr[j--] = t;\n                }\n            }\n            if (j - start < end - i) {\n                if (start < j) {\n                    stack[top++] = start;\n                    stack[top++] = j;\n                }\n                start = i;\n            } else {\n                if (i < end) {\n                    stack[top++] = i;\n                    stack[top++] = end;\n                }\n                end = j;\n            }\n        }\n    }\n    return arr;\n}",
  "sinceUse": 0
}]