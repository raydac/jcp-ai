[
  {
    "instant": "2025-09-25T19:48:48.794334155Z",
    "key": "xSJc9S+tkUTe8REi08LfsXBzuUldeD9UjZucW1PC/A/tGfR/nE+zXqZnzr5Swm7V+1cvFUHskL+A3rd6e9yQISAFtrh83GSDiyTPrm52r9U\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts a copy of the given array using a fast, low-overhead algorithm.\n * Returns the same array if it is null, empty, or single-element; otherwise returns a new array with sorted values.\n * The result is in ascending order when asc is true, descending otherwise.\n *\n * @param array the array to be sorted\n * @param asc true for ascending order, false for descending\n * @return the same array if null, empty, or single-element; otherwise a new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) return array;\n    final int n \u003d array.length;\n    final int[] b \u003d new int[n];\n    for (int i \u003d 0; i \u003c n; i++) b[i] \u003d array[i];\n    int lo \u003d 0, hi \u003d n - 1;\n    final int[] stack \u003d new int[128];\n    int top \u003d 0;\n    for (;;) {\n        if (hi - lo \u003c\u003d 32) {\n            for (int i \u003d lo + 1; i \u003c\u003d hi; i++) {\n                int v \u003d b[i], j \u003d i - 1;\n                while (j \u003e\u003d lo \u0026\u0026 b[j] \u003e v) {\n                    b[j + 1] \u003d b[j];\n                    j--;\n                }\n                b[j + 1] \u003d v;\n            }\n            if (top \u003d\u003d 0) break;\n            hi \u003d stack[--top];\n            lo \u003d stack[--top];\n            continue;\n        }\n        int mid \u003d (lo + hi) \u003e\u003e\u003e 1;\n        int a \u003d b[lo], m \u003d b[mid], c \u003d b[hi];\n        int pivot;\n        if (a \u003c m) {\n            if (m \u003c c) pivot \u003d m;\n            else pivot \u003d (a \u003c c) ? c : a;\n        } else {\n            if (a \u003c c) pivot \u003d a;\n            else pivot \u003d (m \u003c c) ? c : m;\n        }\n        int lt \u003d lo, i \u003d lo, gt \u003d hi;\n        while (i \u003c\u003d gt) {\n            int v \u003d b[i];\n            if (v \u003c pivot) {\n                int t \u003d b[lt]; b[lt] \u003d b[i]; b[i] \u003d t;\n                lt++; i++;\n            } else if (v \u003e pivot) {\n                int t \u003d b[i]; b[i] \u003d b[gt]; b[gt] \u003d t;\n                gt--;\n            } else {\n                i++;\n            }\n        }\n        int leftLo \u003d lo, leftHi \u003d lt - 1;\n        int rightLo \u003d gt + 1, rightHi \u003d hi;\n        if (leftHi - leftLo \u003e rightHi - rightLo) {\n            if (leftLo \u003c leftHi) { stack[top++] \u003d leftLo; stack[top++] \u003d leftHi; }\n            lo \u003d rightLo; hi \u003d rightHi;\n        } else {\n            if (rightLo \u003c rightHi) { stack[top++] \u003d rightLo; stack[top++] \u003d rightHi; }\n            lo \u003d leftLo; hi \u003d leftHi;\n        }\n    }\n    if (!asc) {\n        for (int i \u003d 0, j \u003d n - 1; i \u003c j; i++, j--) {\n            int t \u003d b[i]; b[i] \u003d b[j]; b[j] \u003d t;\n        }\n    }\n    return b;\n}",
    "sinceUse": 0
  }
]