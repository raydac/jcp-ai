[{
  "uuid": "28addd0b-54f7-43ec-8d02-7fa13d82123c",
  "instant": "2025-07-21T21:44:04.673332440Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the input integer array in ascending or descending order, returning a new sorted array.\n * Uses in-place dual-pivot quicksort for maximum speed and minimal memory overhead.\n * If the input array is null, empty, or single-value, returns the same instance.\n * No third-party utilities or libraries are used.\n *\n * @param array the array to sort\n * @param asc if true, sort in ascending order; otherwise, in descending order\n * @return a sorted array as per the order specified\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    final int[] a = java.util.Arrays.copyOf(array, array.length);\n    int left = 0, right = a.length - 1;\n    java.util.Deque<int[]> stack = new java.util.ArrayDeque<>();\n    stack.push(new int[]{left, right});\n    while (!stack.isEmpty()) {\n        int[] bounds = stack.pop();\n        left = bounds[0];\n        right = bounds[1];\n        while (right > left) {\n            int len = right - left + 1;\n            if (len < 32) {\n                for (int i = left + 1; i <= right; i++) {\n                    int v = a[i], j = i - 1;\n                    while (j >= left && (asc ? a[j] > v : a[j] < v)) {\n                        a[j + 1] = a[j];\n                        j--;\n                    }\n                    a[j + 1] = v;\n                }\n                break;\n            }\n            int seventh = (len >> 3) + (len >> 6) + 1;\n            int e1 = left + seventh, e2 = e1 + seventh, e3 = (left + right) >>> 1;\n            int e4 = right - seventh - seventh, e5 = right - seventh;\n            int[] idx = {e1, e2, e3, e4, e5};\n            int[] vals = {a[e1], a[e2], a[e3], a[e4], a[e5]};\n            for (int i = 1; i < 5; i++) {\n                int v = vals[i], j = i - 1;\n                while (j >= 0 && (asc ? vals[j] > v : vals[j] < v)) {\n                    vals[j + 1] = vals[j];\n                    idx[j + 1] = idx[j];\n                    j--;\n                }\n                vals[j + 1] = v;\n                idx[j + 1] = idx[i];\n            }\n            int pivot1 = vals[1], pivot2 = vals[3];\n            int p1 = idx[1], p2 = idx[3];\n            if ((asc ? pivot1 == pivot2 : pivot1 == pivot2)) {\n                pivot1 = a[left];\n                p1 = left;\n                pivot2 = a[right];\n                p2 = right;\n            }\n            a[p1] = a[left];\n            a[left] = pivot1;\n            a[p2] = a[right];\n            a[right] = pivot2;\n            int less = left + 1, great = right - 1;\n            if ((asc ? pivot1 > pivot2 : pivot1 < pivot2)) {\n                int t = pivot1;\n                pivot1 = pivot2;\n                pivot2 = t;\n                a[left] = pivot1;\n                a[right] = pivot2;\n            }\n            int k = less;\n            while (k <= great) {\n                if (asc ? a[k] < pivot1 : a[k] > pivot1) {\n                    int t = a[k];\n                    a[k] = a[less];\n                    a[less++] = t;\n                } else if (asc ? a[k] > pivot2 : a[k] < pivot2) {\n                    while (k < great && (asc ? a[great] > pivot2 : a[great] < pivot2)) great--;\n                    int t = a[k];\n                    a[k] = a[great];\n                    a[great--] = t;\n                    if (asc ? a[k] < pivot1 : a[k] > pivot1) {\n                        t = a[k];\n                        a[k] = a[less];\n                        a[less++] = t;\n                    }\n                }\n                k++;\n            }\n            a[left] = a[less - 1];\n            a[less - 1] = pivot1;\n            a[right] = a[great + 1];\n            a[great + 1] = pivot2;\n            stack.push(new int[]{great + 2, right});\n            stack.push(new int[]{less, great});\n            right = less - 2;\n        }\n    }\n    return a;\n}"
}]