[{
  "uuid": "978d64f5-97a9-4d04-8340-6bed9dfb259d",
  "instant": "2025-08-09T08:46:53.237510915Z",
  "key": "JwczFQkRi2Zg3xhUyf6W/AmYQ5kcV3uURwixbOrhl4LoEObCv8opaLuXOUNjbRhs78yzYjPOca09mfWrmFGRzXVafnmW4+ZJMFHIWynJd+0=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the given int array using an in-place, non-recursive 3-way quicksort with insertion sort for small partitions.\n * If the array is null, empty, or has a single element, the same reference is returned. Otherwise a new copy is created,\n * sorted, and returned. Sorting is ascending when asc is true, descending otherwise. Uses O(log n) extra stack space.\n *\n * @param array the array to sort\n * @param asc true for ascending order, false for descending\n * @return the same array if null or length < 2; otherwise a new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    final int n = array.length;\n    final int[] a = new int[n];\n    for (int i = 0; i < n; i++) a[i] = array[i];\n    final int threshold = 24;\n    final int[] lStack = new int[64];\n    final int[] rStack = new int[64];\n    int top = 0;\n    int l = 0, r = n - 1;\n    while (true) {\n        while (r - l + 1 <= threshold) {\n            for (int i = l + 1; i <= r; i++) {\n                int x = a[i];\n                int j = i - 1;\n                while (j >= l && (asc ? a[j] > x : a[j] < x)) {\n                    a[j + 1] = a[j];\n                    j--;\n                }\n                a[j + 1] = x;\n            }\n            if (top == 0) return a;\n            l = lStack[--top];\n            r = rStack[top];\n        }\n        int m = (l + r) >>> 1;\n        int v1 = a[l], v2 = a[m], v3 = a[r];\n        int pivot;\n        if (v1 < v2) {\n            if (v2 < v3) pivot = v2;\n            else if (v1 < v3) pivot = v3; else pivot = v1;\n        } else {\n            if (v1 < v3) pivot = v1;\n            else if (v2 < v3) pivot = v3; else pivot = v2;\n        }\n        int i = l, lt = l, gt = r;\n        while (i <= gt) {\n            int ai = a[i];\n            if (asc ? ai < pivot : ai > pivot) {\n                int t = a[lt]; a[lt] = ai; a[i] = t;\n                lt++; i++;\n            } else if (asc ? ai > pivot : ai < pivot) {\n                int t = a[gt]; a[gt] = ai; a[i] = t;\n                gt--;\n            } else {\n                i++;\n            }\n        }\n        int leftSize = lt - l;\n        int rightSize = r - gt;\n        if (leftSize < rightSize) {\n            if (rightSize > 1) { lStack[top] = gt + 1; rStack[top] = r; top++; }\n            r = lt - 1;\n        } else {\n            if (leftSize > 1) { lStack[top] = l; rStack[top] = lt - 1; top++; }\n            l = gt + 1;\n        }\n    }\n}",
  "sinceUse": 0
}]