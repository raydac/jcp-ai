[
  {
    "instant": "2025-09-27T14:04:13.973536330Z",
    "key": "xSJc9S+tkUTe8REi08LfsXBzuUldeD9UjZucW1PC/A/tGfR/nE+zXqZnzr5Swm7V+1cvFUHskL+A3rd6e9yQISAFtrh83GSDiyTPrm52r9U\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given int array using a high-performance 3-way quicksort with median-of-three pivot and insertion sort for small ranges.\n * If the input array is null, empty, or has a single element, the same array is returned. Otherwise, a new sorted array is returned.\n * Sorting order is ascending if asc is true, descending otherwise. No external utilities are used.\n *\n * @param array the array to sort\n * @param asc true for ascending order, false for descending\n * @return the same array if null/empty/singleton; otherwise a new array with sorted values\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c 2) return array;\n    final int n \u003d array.length;\n    final int[] a \u003d new int[n];\n    for (int i \u003d 0; i \u003c n; i++) a[i] \u003d array[i];\n    final int INSERTION \u003d 32;\n    final int[] L \u003d new int[64];\n    final int[] R \u003d new int[64];\n    int top \u003d 0;\n    L[0] \u003d 0;\n    R[0] \u003d n - 1;\n    while (top \u003e\u003d 0) {\n        int l \u003d L[top];\n        int r \u003d R[top];\n        top--;\n        while (r - l \u003e\u003d INSERTION) {\n            int m \u003d (l + r) \u003e\u003e\u003e 1;\n            int x \u003d a[l], y \u003d a[m], z \u003d a[r];\n            int p;\n            if (x \u003c y) {\n                if (y \u003c z) p \u003d y;\n                else if (x \u003c z) p \u003d z;\n                else p \u003d x;\n            } else {\n                if (x \u003c z) p \u003d x;\n                else if (y \u003c z) p \u003d z;\n                else p \u003d y;\n            }\n            int i \u003d l, lt \u003d l, gt \u003d r;\n            if (asc) {\n                while (i \u003c\u003d gt) {\n                    int ai \u003d a[i];\n                    if (ai \u003c p) { int t \u003d a[lt]; a[lt] \u003d ai; a[i] \u003d t; lt++; i++; }\n                    else if (ai \u003e p) { int t \u003d a[gt]; a[gt] \u003d ai; a[i] \u003d t; gt--; }\n                    else i++;\n                }\n            } else {\n                while (i \u003c\u003d gt) {\n                    int ai \u003d a[i];\n                    if (ai \u003e p) { int t \u003d a[lt]; a[lt] \u003d ai; a[i] \u003d t; lt++; i++; }\n                    else if (ai \u003c p) { int t \u003d a[gt]; a[gt] \u003d ai; a[i] \u003d t; gt--; }\n                    else i++;\n                }\n            }\n            int leftSize \u003d lt - l;\n            int rightSize \u003d r - gt;\n            if (leftSize \u003c rightSize) {\n                if (gt + 1 \u003c r) { top++; L[top] \u003d gt + 1; R[top] \u003d r; }\n                r \u003d lt - 1;\n            } else {\n                if (l \u003c lt - 1) { top++; L[top] \u003d l; R[top] \u003d lt - 1; }\n                l \u003d gt + 1;\n            }\n        }\n        if (l \u003c r) {\n            for (int i \u003d l + 1; i \u003c\u003d r; i++) {\n                int v \u003d a[i];\n                int j \u003d i - 1;\n                if (asc) {\n                    while (j \u003e\u003d l \u0026\u0026 a[j] \u003e v) { a[j + 1] \u003d a[j]; j--; }\n                } else {\n                    while (j \u003e\u003d l \u0026\u0026 a[j] \u003c v) { a[j + 1] \u003d a[j]; j--; }\n                }\n                a[j + 1] \u003d v;\n            }\n        }\n    }\n    return a;\n}",
    "sinceUse": 0
  }
]