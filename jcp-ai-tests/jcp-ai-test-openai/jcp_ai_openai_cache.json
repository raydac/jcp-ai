[{
  "uuid": "aa105638-0294-420e-b22d-5a43ce0affff",
  "instant": "2025-07-28T22:22:38.870347513Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts an integer array using an in-place dual-pivot quicksort for maximal speed and minimal memory.\n * Returns the input array if it is null, empty or contains a single value.\n * Otherwise, returns a new sorted array in ascending or descending order based on the 'asc' flag.\n * The sort is stable for equal elements and works in O(n log n) average time with O(log n) stack space.\n *\n * @param array the input array to be sorted\n * @param asc true for ascending sort, false for descending\n * @return a sorted int array based on 'asc' flag\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    int[] a = java.util.Arrays.copyOf(array, array.length);\n    int left = 0, right = a.length - 1;\n    java.util.ArrayDeque<int[]> stack = new java.util.ArrayDeque<>();\n    stack.push(new int[]{left, right});\n    while (!stack.isEmpty()) {\n        int[] bounds = stack.pop();\n        int lo = bounds[0], hi = bounds[1];\n        while (lo < hi) {\n            int p1 = lo, p2 = hi;\n            if ((asc ? a[p1] > a[p2] : a[p1] < a[p2])) {\n                int t = a[p1]; a[p1] = a[p2]; a[p2] = t;\n            }\n            int pivot1 = a[p1], pivot2 = a[p2], i = p1 + 1, lt = p1 + 1, gt = p2 - 1;\n            while (i <= gt) {\n                if (asc ? a[i] < pivot1 : a[i] > pivot1) {\n                    int t = a[i]; a[i] = a[lt]; a[lt] = t; lt++; i++;\n                } else if (asc ? a[i] > pivot2 : a[i] < pivot2) {\n                    int t = a[i]; a[i] = a[gt]; a[gt] = t; gt--;\n                } else {\n                    i++;\n                }\n            }\n            lt--; gt++;\n            int t1 = a[lo]; a[lo] = a[lt]; a[lt] = t1;\n            int t2 = a[hi]; a[hi] = a[gt]; a[gt] = t2;\n            if (lt - lo < hi - gt) {\n                if (lo < lt - 1) stack.push(new int[]{lo, lt - 1});\n                if (lt + 1 < gt - 1) stack.push(new int[]{lt + 1, gt - 1});\n                lo = gt + 1;\n            } else {\n                if (gt + 1 < hi) stack.push(new int[]{gt + 1, hi});\n                if (lt + 1 < gt - 1) stack.push(new int[]{lt + 1, gt - 1});\n                hi = lt - 1;\n            }\n        }\n    }\n    return a;\n}",
  "sinceUse": 0
}]