[
  {
    "instant": "2025-09-02T21:28:28.380041296Z",
    "key": "JwczFQkRi2Zg3xhUyf6W/AmYQ5kcV3uURwixbOrhl4LoEObCv8opaLuXOUNjbRhs78yzYjPOca09mfWrmFGRzXVafnmW4+ZJMFHIWynJd+0\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given int array using a fast in-place 3-way quicksort on a copied array.\n * Returns the same incoming array if it is null, empty, or contains a single element.\n * Otherwise, returns a new array with sorted values in ascending or descending order as specified.\n *\n * @param array the array to be sorted\n * @param asc true for ascending order; false for descending order\n * @return the same incoming array if null, empty, or single element; otherwise a new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c 2) return array;\n    final int n \u003d array.length;\n    final int[] a \u003d new int[n];\n    for (int i \u003d 0; i \u003c n; i++) a[i] \u003d array[i];\n    final int small \u003d 32;\n    int[] stack \u003d new int[(2 * (32 - Integer.numberOfLeadingZeros(n))) + 2];\n    int top \u003d 0;\n    stack[top++] \u003d 0;\n    stack[top++] \u003d n - 1;\n    while (top \u003e 0) {\n        int r \u003d stack[--top];\n        int l \u003d stack[--top];\n        if (r - l + 1 \u003c\u003d small) {\n            for (int i \u003d l + 1; i \u003c\u003d r; i++) {\n                int v \u003d a[i], j \u003d i - 1;\n                while (j \u003e\u003d l \u0026\u0026 a[j] \u003e v) {\n                    a[j + 1] \u003d a[j];\n                    j--;\n                }\n                a[j + 1] \u003d v;\n            }\n            continue;\n        }\n        int mid \u003d (l + r) \u003e\u003e\u003e 1;\n        int x \u003d a[l], y \u003d a[mid], z \u003d a[r], pv;\n        if (x \u003c y) {\n            if (y \u003c z) pv \u003d y;\n            else if (x \u003c z) pv \u003d z;\n            else pv \u003d x;\n        } else {\n            if (x \u003c z) pv \u003d x;\n            else if (y \u003c z) pv \u003d z;\n            else pv \u003d y;\n        }\n        int lt \u003d l, i \u003d l, gt \u003d r;\n        while (i \u003c\u003d gt) {\n            int ai \u003d a[i];\n            if (ai \u003c pv) {\n                int t \u003d a[lt]; a[lt] \u003d a[i]; a[i] \u003d t;\n                lt++; i++;\n            } else if (ai \u003e pv) {\n                int t \u003d a[i]; a[i] \u003d a[gt]; a[gt] \u003d t;\n                gt--;\n            } else {\n                i++;\n            }\n        }\n        if (lt - l \u003e 1) {\n            if (top + 2 \u003e stack.length) {\n                int[] ns \u003d new int[stack.length \u003c\u003c 1];\n                System.arraycopy(stack, 0, ns, 0, top);\n                stack \u003d ns;\n            }\n            stack[top++] \u003d l;\n            stack[top++] \u003d lt - 1;\n        }\n        if (r - gt \u003e 1) {\n            if (top + 2 \u003e stack.length) {\n                int[] ns \u003d new int[stack.length \u003c\u003c 1];\n                System.arraycopy(stack, 0, ns, 0, top);\n                stack \u003d ns;\n            }\n            stack[top++] \u003d gt + 1;\n            stack[top++] \u003d r;\n        }\n    }\n    if (!asc) {\n        for (int i \u003d 0, j \u003d n - 1; i \u003c j; i++, j--) {\n            int t \u003d a[i]; a[i] \u003d a[j]; a[j] \u003d t;\n        }\n    }\n    return a;\n}",
    "sinceUse": 0
  }
]