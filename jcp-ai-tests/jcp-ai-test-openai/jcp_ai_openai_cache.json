[
  {
    "instant": "2025-10-19T12:05:43.741662438Z",
    "key": "xSJc9S+tkUTe8REi08LfsXBzuUldeD9UjZucW1PC/A/tGfR/nE+zXqZnzr5Swm7V+1cvFUHskL+A3rd6e9yQISAFtrh83GSDiyTPrm52r9U\u003d",
    "fileName": "ArraySorter.java",
    "line": 24,
    "result": "/**\n * Sorts the provided int array using a fast, iterative quicksort with insertion sort optimization and minimal memory overhead.\n * Returns the same array instance for null, empty, or single-element arrays; otherwise returns a new array containing the sorted values.\n * Sorting is in ascending order if asc is true, descending otherwise.\n *\n * @param array the array to sort\n * @param asc true for ascending order, false for descending\n * @return the same array if null, empty, or single-element; otherwise a new array with sorted contents\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c 2) return array;\n    final int n \u003d array.length;\n    final int[] a \u003d new int[n];\n    System.arraycopy(array, 0, a, 0, n);\n    final int TH \u003d 24;\n    int m \u003d n, depth \u003d 0;\n    while ((m \u003e\u003e\u003e\u003d 1) !\u003d 0) depth++;\n    depth \u003d (depth + 3) \u003c\u003c 1;\n    final int[] lows \u003d new int[depth];\n    final int[] highs \u003d new int[depth];\n    int top \u003d 0;\n    lows[0] \u003d 0;\n    highs[0] \u003d n - 1;\n    while (top \u003e\u003d 0) {\n        int lo \u003d lows[top];\n        int hi \u003d highs[top--];\n        while (hi - lo \u003e TH) {\n            int mid \u003d (lo + hi) \u003e\u003e\u003e 1;\n            int x \u003d a[lo], y \u003d a[mid], z \u003d a[hi];\n            int pivot;\n            if (asc) {\n                if (x \u003c y) {\n                    if (y \u003c z) pivot \u003d y; else if (x \u003c z) pivot \u003d z; else pivot \u003d x;\n                } else {\n                    if (x \u003c z) pivot \u003d x; else if (y \u003c z) pivot \u003d z; else pivot \u003d y;\n                }\n            } else {\n                if (x \u003e y) {\n                    if (y \u003e z) pivot \u003d y; else if (x \u003e z) pivot \u003d z; else pivot \u003d x;\n                } else {\n                    if (x \u003e z) pivot \u003d x; else if (y \u003e z) pivot \u003d z; else pivot \u003d y;\n                }\n            }\n            int i \u003d lo, j \u003d hi;\n            if (asc) {\n                while (true) {\n                    while (a[i] \u003c pivot) i++;\n                    while (a[j] \u003e pivot) j--;\n                    if (i \u003c\u003d j) {\n                        if (i !\u003d j) {\n                            int t \u003d a[i]; a[i] \u003d a[j]; a[j] \u003d t;\n                        }\n                        i++; j--;\n                        if (i \u003e j) break;\n                    } else break;\n                }\n            } else {\n                while (true) {\n                    while (a[i] \u003e pivot) i++;\n                    while (a[j] \u003c pivot) j--;\n                    if (i \u003c\u003d j) {\n                        if (i !\u003d j) {\n                            int t \u003d a[i]; a[i] \u003d a[j]; a[j] \u003d t;\n                        }\n                        i++; j--;\n                        if (i \u003e j) break;\n                    } else break;\n                }\n            }\n            if (j - lo \u003c hi - i) {\n                if (i \u003c hi) { lows[++top] \u003d i; highs[top] \u003d hi; }\n                hi \u003d j;\n            } else {\n                if (lo \u003c j) { lows[++top] \u003d lo; highs[top] \u003d j; }\n                lo \u003d i;\n            }\n        }\n        if (lo \u003c hi) {\n            if (asc) {\n                for (int i \u003d lo + 1; i \u003c\u003d hi; i++) {\n                    int v \u003d a[i], j \u003d i - 1;\n                    while (j \u003e\u003d lo \u0026\u0026 a[j] \u003e v) { a[j + 1] \u003d a[j]; j--; }\n                    a[j + 1] \u003d v;\n                }\n            } else {\n                for (int i \u003d lo + 1; i \u003c\u003d hi; i++) {\n                    int v \u003d a[i], j \u003d i - 1;\n                    while (j \u003e\u003d lo \u0026\u0026 a[j] \u003c v) { a[j + 1] \u003d a[j]; j--; }\n                    a[j + 1] \u003d v;\n                }\n            }\n        }\n    }\n    return a;\n}",
    "sinceUse": 0
  }
]