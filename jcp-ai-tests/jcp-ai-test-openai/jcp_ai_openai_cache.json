[{
  "uuid": "e177b488-bab2-49de-8798-72fce9fea74e",
  "instant": "2025-08-02T19:16:49.459597858Z",
  "key": "Wau0lYKHyzmZOBY450/Wr2+0cKRZ73zSvFrzIu+9+Z0XLGgd2qGXjIiVVNd9ye7oGcynO7jkUN+MIxZmsK59QbxGFPlx+5Ly5B76ibTS/Is=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the given integer array using an in-place dual-pivot quicksort algorithm for high performance and minimal memory overhead.\n * Returns the original array if it is null, empty, or of length one; otherwise, returns a new sorted array according to the specified order.\n * The sorting is performed in ascending order if asc is true, otherwise in descending order.\n *\n * @param array the integer array to be sorted\n * @param asc true for ascending sort, false for descending\n * @return a sorted array in the specified order, possibly the original array if null/empty/single-element\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    int[] a = java.util.Arrays.copyOf(array, array.length);\n    int left = 0, right = a.length - 1;\n    java.util.ArrayDeque<int[]> stack = new java.util.ArrayDeque<>();\n    stack.push(new int[]{left, right});\n    while (!stack.isEmpty()) {\n        int[] bounds = stack.pop();\n        int l = bounds[0], r = bounds[1];\n        if (l >= r) continue;\n        int x = a[l], y = a[r];\n        if ((asc && x > y) || (!asc && x < y)) {\n            int t = a[l]; a[l] = a[r]; a[r] = t;\n            x = a[l]; y = a[r];\n        }\n        int i = l + 1, k = r - 1, p = l + 1;\n        while (p <= k) {\n            int ap = a[p];\n            if ((asc && ap < x) || (!asc && ap > x)) {\n                int t = a[p]; a[p] = a[i]; a[i] = t;\n                i++; p++;\n            } else if ((asc && ap > y) || (!asc && ap < y)) {\n                while ((asc && a[k] > y) || (!asc && a[k] < y)) { if (p >= k) break; k--; }\n                int t = a[p]; a[p] = a[k]; a[k] = t;\n                k--;\n                if ((asc && a[p] < x) || (!asc && a[p] > x)) {\n                    t = a[p]; a[p] = a[i]; a[i] = t;\n                    i++;\n                }\n                p++;\n            } else {\n                p++;\n            }\n        }\n        i--; k++;\n        int t = a[l]; a[l] = a[i]; a[i] = t;\n        t = a[r]; a[r] = a[k]; a[k] = t;\n        if (i - 1 > l) stack.push(new int[]{l, i - 1});\n        if (i + 1 < k - 1) stack.push(new int[]{i + 1, k - 1});\n        if (k + 1 < r) stack.push(new int[]{k + 1, r});\n    }\n    return a;\n}",
  "sinceUse": 0
}]