[
  {
    "instant": "2025-09-22T07:36:49.391419277Z",
    "key": "xSJc9S+tkUTe8REi08LfsXBzuUldeD9UjZucW1PC/A/tGfR/nE+zXqZnzr5Swm7V+1cvFUHskL+A3rd6e9yQISAFtrh83GSDiyTPrm52r9U\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts a copy of the given array using a high-performance in-place 3-way quicksort with insertion sort for small ranges.\n * Returns the same reference when the input is null or has fewer than 2 elements; otherwise returns a new sorted array.\n * Sorting order is ascending when asc is true, descending otherwise.\n *\n * @param array the array to sort\n * @param asc true for ascending order, false for descending\n * @return the same array if null or size \u003c 2; otherwise a new array with sorted values\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c 2) return array;\n    final int n \u003d array.length;\n    final int[] a \u003d new int[n];\n    java.lang.System.arraycopy(array, 0, a, 0, n);\n    final int THRESHOLD \u003d 32;\n    if (n \u003c\u003d THRESHOLD) {\n        for (int i \u003d 1; i \u003c n; i++) {\n            int x \u003d a[i], j \u003d i - 1;\n            while (j \u003e\u003d 0 \u0026\u0026 a[j] \u003e x) { a[j + 1] \u003d a[j]; j--; }\n            a[j + 1] \u003d x;\n        }\n        if (!asc) {\n            for (int i \u003d 0, j \u003d n - 1; i \u003c j; i++, j--) { int t \u003d a[i]; a[i] \u003d a[j]; a[j] \u003d t; }\n        }\n        return a;\n    }\n    final int[] ls \u003d new int[64];\n    final int[] rs \u003d new int[64];\n    int top \u003d 0;\n    ls[top] \u003d 0; rs[top] \u003d n - 1; top++;\n    while (top \u003e 0) {\n        int l \u003d ls[--top];\n        int r \u003d rs[top];\n        while (r - l + 1 \u003e THRESHOLD) {\n            int m \u003d l + ((r - l) \u003e\u003e\u003e 1);\n            int x \u003d a[l], y \u003d a[m], z \u003d a[r];\n            int pivot;\n            if (x \u003c y) {\n                if (y \u003c z) pivot \u003d y;\n                else pivot \u003d (x \u003c z) ? z : x;\n            } else {\n                if (x \u003c z) pivot \u003d x;\n                else pivot \u003d (y \u003c z) ? z : y;\n            }\n            int lt \u003d l, i \u003d l, gt \u003d r;\n            while (i \u003c\u003d gt) {\n                int v \u003d a[i];\n                if (v \u003c pivot) { int t \u003d a[lt]; a[lt] \u003d v; a[i] \u003d t; lt++; i++; }\n                else if (v \u003e pivot) { int t \u003d a[gt]; a[gt] \u003d v; a[i] \u003d t; gt--; }\n                else { i++; }\n            }\n            int leftSize \u003d lt - l;\n            int rightSize \u003d r - gt;\n            if (leftSize \u003c rightSize) {\n                if (rightSize \u003e 1) { ls[top] \u003d gt + 1; rs[top] \u003d r; top++; }\n                r \u003d lt - 1;\n                if (leftSize \u003c\u003d 1) break;\n            } else {\n                if (leftSize \u003e 1) { ls[top] \u003d l; rs[top] \u003d lt - 1; top++; }\n                l \u003d gt + 1;\n                if (rightSize \u003c\u003d 1) break;\n            }\n        }\n        if (l \u003c r) {\n            for (int i \u003d l + 1; i \u003c\u003d r; i++) {\n                int x \u003d a[i], j \u003d i - 1;\n                while (j \u003e\u003d l \u0026\u0026 a[j] \u003e x) { a[j + 1] \u003d a[j]; j--; }\n                a[j + 1] \u003d x;\n            }\n        }\n    }\n    if (!asc) {\n        for (int i \u003d 0, j \u003d n - 1; i \u003c j; i++, j--) { int t \u003d a[i]; a[i] \u003d a[j]; a[j] \u003d t; }\n    }\n    return a;\n}",
    "sinceUse": 0
  }
]