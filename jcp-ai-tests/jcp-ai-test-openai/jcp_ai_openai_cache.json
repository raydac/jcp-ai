[
  {
    "instant": "2025-09-03T15:30:50.669804987Z",
    "key": "JwczFQkRi2Zg3xhUyf6W/AmYQ5kcV3uURwixbOrhl4LoEObCv8opaLuXOUNjbRhs78yzYjPOca09mfWrmFGRzXVafnmW4+ZJMFHIWynJd+0\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given int array using an iterative quicksort with median-of-three pivot selection\n * and insertion sort for small partitions. For null, empty, or single-element arrays, returns\n * the same reference; otherwise returns a new array with sorted values. Sorting is ascending\n * when asc is true, descending otherwise.\n *\n * @param array the array to sort\n * @param asc true for ascending order, false for descending order\n * @return the same array if null or length \u003c 2; otherwise a new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c 2) return array;\n    final int n \u003d array.length;\n    final int[] a \u003d new int[n];\n    System.arraycopy(array, 0, a, 0, n);\n    final int THRESH \u003d 24;\n    int l \u003d 0, r \u003d n - 1;\n    final int log \u003d 32 - Integer.numberOfLeadingZeros(n);\n    final int[] stack \u003d new int[(log + 1) \u003c\u003c 1];\n    int top \u003d 0;\n    for (;;) {\n        while (r - l \u003e THRESH) {\n            int i \u003d l, j \u003d r;\n            int mid \u003d (l + r) \u003e\u003e\u003e 1;\n            int x \u003d a[l], y \u003d a[mid], z \u003d a[r];\n            int pivot;\n            if (x \u003c y) {\n                if (y \u003c z) pivot \u003d y;\n                else pivot \u003d (x \u003c z ? z : x);\n            } else {\n                if (x \u003c z) pivot \u003d x;\n                else pivot \u003d (y \u003c z ? z : y);\n            }\n            if (asc) {\n                while (i \u003c\u003d j) {\n                    while (a[i] \u003c pivot) i++;\n                    while (a[j] \u003e pivot) j--;\n                    if (i \u003c\u003d j) {\n                        int t \u003d a[i]; a[i++] \u003d a[j]; a[j--] \u003d t;\n                    }\n                }\n            } else {\n                while (i \u003c\u003d j) {\n                    while (a[i] \u003e pivot) i++;\n                    while (a[j] \u003c pivot) j--;\n                    if (i \u003c\u003d j) {\n                        int t \u003d a[i]; a[i++] \u003d a[j]; a[j--] \u003d t;\n                    }\n                }\n            }\n            if (j - l \u003c r - i) {\n                if (l \u003c j) { stack[top++] \u003d l; stack[top++] \u003d j; }\n                l \u003d i;\n            } else {\n                if (i \u003c r) { stack[top++] \u003d i; stack[top++] \u003d r; }\n                r \u003d j;\n            }\n        }\n        if (l \u003c r) {\n            if (asc) {\n                for (int i \u003d l + 1; i \u003c\u003d r; i++) {\n                    int v \u003d a[i], j \u003d i - 1;\n                    while (j \u003e\u003d l \u0026\u0026 a[j] \u003e v) { a[j + 1] \u003d a[j]; j--; }\n                    a[j + 1] \u003d v;\n                }\n            } else {\n                for (int i \u003d l + 1; i \u003c\u003d r; i++) {\n                    int v \u003d a[i], j \u003d i - 1;\n                    while (j \u003e\u003d l \u0026\u0026 a[j] \u003c v) { a[j + 1] \u003d a[j]; j--; }\n                    a[j + 1] \u003d v;\n                }\n            }\n        }\n        if (top \u003d\u003d 0) break;\n        r \u003d stack[--top];\n        l \u003d stack[--top];\n    }\n    return a;\n}",
    "sinceUse": 0
  }
]