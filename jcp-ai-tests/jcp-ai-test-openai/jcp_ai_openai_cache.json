[
  {
    "instant": "2025-08-13T10:42:34.032307957Z",
    "key": "JwczFQkRi2Zg3xhUyf6W/AmYQ5kcV3uURwixbOrhl4LoEObCv8opaLuXOUNjbRhs78yzYjPOca09mfWrmFGRzXVafnmW4+ZJMFHIWynJd+0\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given array of integers using an in-place, iterative 3-way quicksort with insertion sort for small partitions.\n * Returns the same array instance if it is null, empty, or contains a single element. Otherwise, returns a new array\n * containing the sorted values. Sorting order is ascending if asc is true, descending otherwise.\n *\n * @param array the input array to sort\n * @param asc   true for ascending order, false for descending order\n * @return the same array if null, empty, or single-element; otherwise, a new sorted array\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) return array;\n    final int[] a \u003d array.clone();\n    final int n \u003d a.length;\n    final int IS_THRESH \u003d 32;\n    final int[] stack \u003d new int[128];\n    int top \u003d 0;\n    int lo \u003d 0, hi \u003d n - 1;\n    while (true) {\n        while (hi - lo + 1 \u003c\u003d IS_THRESH) {\n            for (int i \u003d lo + 1; i \u003c\u003d hi; i++) {\n                int v \u003d a[i];\n                int j \u003d i - 1;\n                if (asc) {\n                    while (j \u003e\u003d lo \u0026\u0026 a[j] \u003e v) {\n                        a[j + 1] \u003d a[j];\n                        j--;\n                    }\n                } else {\n                    while (j \u003e\u003d lo \u0026\u0026 a[j] \u003c v) {\n                        a[j + 1] \u003d a[j];\n                        j--;\n                    }\n                }\n                a[j + 1] \u003d v;\n            }\n            if (top \u003d\u003d 0) return a;\n            hi \u003d stack[--top];\n            lo \u003d stack[--top];\n        }\n        int x \u003d a[lo], y \u003d a[(lo + hi) \u003e\u003e\u003e 1], z \u003d a[hi];\n        int p;\n        if (asc) {\n            if (x \u003c y) {\n                if (y \u003c z) p \u003d y;\n                else if (x \u003c z) p \u003d z; else p \u003d x;\n            } else {\n                if (x \u003c z) p \u003d x;\n                else if (y \u003c z) p \u003d z; else p \u003d y;\n            }\n        } else {\n            if (x \u003e y) {\n                if (y \u003e z) p \u003d y;\n                else if (x \u003e z) p \u003d z; else p \u003d x;\n            } else {\n                if (x \u003e z) p \u003d x;\n                else if (y \u003e z) p \u003d z; else p \u003d y;\n            }\n        }\n        int i \u003d lo, lt \u003d lo, gt \u003d hi;\n        if (asc) {\n            while (i \u003c\u003d gt) {\n                int v \u003d a[i];\n                if (v \u003c p) {\n                    int t \u003d a[lt]; a[lt] \u003d v; a[i] \u003d t;\n                    lt++; i++;\n                } else if (v \u003e p) {\n                    int t \u003d a[gt]; a[gt] \u003d v; a[i] \u003d t;\n                    gt--;\n                } else {\n                    i++;\n                }\n            }\n        } else {\n            while (i \u003c\u003d gt) {\n                int v \u003d a[i];\n                if (v \u003e p) {\n                    int t \u003d a[lt]; a[lt] \u003d v; a[i] \u003d t;\n                    lt++; i++;\n                } else if (v \u003c p) {\n                    int t \u003d a[gt]; a[gt] \u003d v; a[i] \u003d t;\n                    gt--;\n                } else {\n                    i++;\n                }\n            }\n        }\n        int leftSize \u003d lt - lo;\n        int rightSize \u003d hi - gt;\n        if (leftSize \u003e 1) {\n            if (rightSize \u003e 1) {\n                if (leftSize \u003e rightSize) {\n                    stack[top++] \u003d gt + 1; stack[top++] \u003d hi;\n                    hi \u003d lt - 1;\n                } else {\n                    stack[top++] \u003d lo; stack[top++] \u003d lt - 1;\n                    lo \u003d gt + 1;\n                }\n            } else {\n                hi \u003d lt - 1;\n            }\n        } else if (rightSize \u003e 1) {\n            lo \u003d gt + 1;\n        } else {\n            if (top \u003d\u003d 0) return a;\n            hi \u003d stack[--top];\n            lo \u003d stack[--top];\n        }\n    }\n}",
    "sinceUse": 0
  }
]