[{
  "uuid": "54343fd2-77bb-4a1f-baec-5859b3a4d630",
  "instant": "2025-07-22T07:05:06.411855355Z",
  "key": "tBeMqvVnM5QcBjUZ/+TxUZ6Fl+/Mojpm7a+Nw6rseeIua7lxs8DAJtOsc4M7um0lgBrmDWVfckUOuhfeVo2rLvc7R4KnHfmNwLY/CnFovNs=",
  "fileName": "ArraySorter.java",
  "line": 6,
  "result": "/**\n * Sorts the specified array of integers in ascending or descending order using an in-place quicksort algorithm optimized for speed and minimal memory overhead.\n * Returns the original array if it is null, empty, or has a single element; otherwise, returns a new sorted array.\n * The sorting is stable with respect to asc flag: if true, sorts ascending; if false, sorts descending.\n *\n * @param array the array of integers to sort\n * @param asc sort order flag: true for ascending, false for descending\n * @return a sorted array in the specified order, or the original array if null or too short to require sorting\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array == null || array.length < 2) return array;\n    int[] a = new int[array.length];\n    System.arraycopy(array, 0, a, 0, array.length);\n    int[] stack = new int[a.length << 1];\n    int top = -1, l = 0, r = a.length - 1;\n    stack[++top] = l; stack[++top] = r;\n    while (top >= 0) {\n        r = stack[top--];\n        l = stack[top--];\n        while (l < r) {\n            int i = l + ((r - l) >>> 1), pivot = a[i], t;\n            int p = l, q = r;\n            while (p <= q) {\n                if (asc) {\n                    while (a[p] < pivot) ++p;\n                    while (a[q] > pivot) --q;\n                } else {\n                    while (a[p] > pivot) ++p;\n                    while (a[q] < pivot) --q;\n                }\n                if (p <= q) {\n                    t = a[p]; a[p] = a[q]; a[q] = t;\n                    ++p; --q;\n                }\n            }\n            if (q - l < r - p) {\n                if (l < q) { stack[++top] = l; stack[++top] = q; }\n                l = p;\n            } else {\n                if (p < r) { stack[++top] = p; stack[++top] = r; }\n                r = q;\n            }\n        }\n    }\n    return a;\n}"
}]