[
  {
    "instant": "2025-08-10T07:25:23.859361835Z",
    "key": "ZNuCEXEnYH1jX6kE5r4mY2nsNZWL1ZUB8pYcHxdmee8FLbLI2aX9Kg7WUPvOHwvYF4p5F0SmLNor5wxLpMgCpSp/tgjaohmWBO8HCCC0IWU\u003d",
    "fileName": "ArraySorter.java",
    "line": 6,
    "result": "/**\n * Sorts the given array using an optimized quicksort implementation with minimal memory overhead.\n * The sorting order is determined by the asc parameter (ascending if true, descending if false).\n * Returns the original array if it is null, empty, or contains a single element. Otherwise,\n * returns a new sorted array.\n *\n * @param array the array to be sorted\n * @param asc   flag indicating sorting order (true for ascending, false for descending)\n * @return sorted array or original array if no sorting needed\n */\npublic static int[] fastSort(final int[] array, final boolean asc) {\n    if (array \u003d\u003d null || array.length \u003c\u003d 1) {\n        return array;\n    }\n    int[] result \u003d array.clone();\n    java.util.Random random \u003d new java.util.Random();\n    quickSort(result, 0, result.length - 1, random, asc);\n    return result;\n}\n\nprivate static void quickSort(int[] arr, int low, int high, java.util.Random random, boolean asc) {\n    while (low \u003c high) {\n        int pivot \u003d partition(arr, low, high, random, asc);\n        if (pivot - low \u003c high - pivot) {\n            quickSort(arr, low, pivot - 1, random, asc);\n            low \u003d pivot + 1;\n        } else {\n            quickSort(arr, pivot + 1, high, random, asc);\n            high \u003d pivot - 1;\n        }\n    }\n}\n\nprivate static int partition(int[] arr, int low, int high, java.util.Random random, boolean asc) {\n    int pivotIndex \u003d low + random.nextInt(high - low + 1);\n    swap(arr, pivotIndex, high);\n    int pivot \u003d arr[high];\n    int i \u003d low;\n    for (int j \u003d low; j \u003c high; j++) {\n        boolean condition \u003d asc ? arr[j] \u003c pivot : arr[j] \u003e pivot;\n        if (condition) {\n            swap(arr, i, j);\n            i++;\n        }\n    }\n    swap(arr, i, high);\n    return i;\n}\n\nprivate static void swap(int[] arr, int i, int j) {\n    int temp \u003d arr[i];\n    arr[i] \u003d arr[j];\n    arr[j] \u003d temp;\n}",
    "sinceUse": 0
  }
]